function myFunction(a, b) {
    return a * b;
}


var x = function (a, b) {return a * b};


var myFunction = new Function("a", "b", "return a * b");
var x = myFunction(4, 3);


函数提升（Hoisting）
函数可以在声明之前调用：
myFunction(5);

function myFunction(y) {
    return y * y;
}

自调用函数
(function () {
    var x = "Hello!!";      // 我将调用自己
})();

函数是对象
JavaScript 函数有 属性 和 方法。
arguments.length 属性返回函数调用过程接收到的参数个数：
toString() 方法将函数作为一个字符串返回

ES6 新增了箭头函数
(参数1, 参数2, …, 参数N) => { 函数声明 }
(参数1, 参数2, …, 参数N) => 表达式(单一)

// ES6
const x = (x, y) => x * y;

有的箭头函数都没有自己的 this。 不适合定义一个 对象的方法
当我们使用箭头函数的时候，箭头函数会默认帮我们绑定外层 this 的值，所以在箭头函数中 this 的值和外层的 this 是一样的。
箭头函数是不能提升的，所以需要在使用之前定义。
使用 const 比使用 var 更安全，因为函数表达式始终是一个常量。
如果函数部分只是一个语句，则可以省略 return 关键字和大括号 {}，这样做是一个比较好的习惯