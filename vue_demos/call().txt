ECMAScript规范为所有函数都包含两个方法(这两个方法非继承而来), call 和 apply

call(thisObj，Object)	
调用一个对象的一个方法，以另一个对象替换当前对象。	
call 方法可以用来代替另一个对象调用一个方法。call 方法可将一个函数的对象上下文从初始的上下文改变为由 thisObj 指定的新对象.如果没有提供 thisObj 参数，那么 Global 对象被用作 thisObj

apply(thisObj，[argArray])	
应用某一对象的一个方法，用另一个对象替换当前对象。	
如果 argArray 不是一个有效的数组或者不是 arguments 对象，那么将导致一个 TypeError。如果没有提供 argArray 和 thisObj 任何一个参数，那么 Global 对象将被用作 thisObj，


//定义一个add 方法
function add(x, y) {
    return x + y;
}

//用call 来调用 add 方法
function myAddCall(x, y) {
    //调用 add 方法 的 call 方法
    return add.call(this, x, y);
}

//apply 来调用 add 方法
function myAddApply(x, y) {
    //调用 add 方法 的 applly 方法
    return add.apply(this, [x, y]);
}

console.log(myAddCall(10, 20));    //输出结果30

console.log(myAddApply(20, 20));  //输出结果40


改变函数作用域:
var name = '小白';

var obj = {name:'小红'};

function sayName() {
    return this.name;
}

console.log(sayName.call(this));    //输出小白
console.log(sayName. call(obj));    //输入小红


高级用法，实现 js 继承:
//父类 Person
function Person() {
    this.sayName = function() {
        return this.name;
    }
}

//子类 Chinese
function Chinese(name) {
    //借助 call 实现继承
    Person.call(this);
    this.name = name;

    this.ch = function() {
        alert('我是中国人');
    }
}

//子类 America
function America(name) {
    //借助 call 实现继承
    Person.call(this);
    this.name = name;

    this.am = function() {
        alert('我是美国人');
    }
}


//测试
var chinese = new Chinese('成龙');
//调用 父类方法
console.log(chinese.sayName());   //输出 成龙

var america = new America('America');
//调用 父类方法
console.log(america.sayName());   //输出 America