Babel 是一个广泛使用的 ES6 转码器，可以将 ES6 代码转为 ES5 代码，从而在现有环境执行

这意味着，你可以用 ES6 的方式编写程序，又不用担心现有环境是否支持

// 转码前
input.map(item => item + 1);

// 转码后
input.map(function (item) {
  return item + 1;
});

上面的原始代码用了箭头函数，Babel 将其转为普通函数，就能在不支持箭头函数的 JavaScript 环境执行了

===================Babel 的配置文件是.babelrc
该文件用来设置转码规则和插件，基本格式如下。
{
  "presets": [],
  "plugins": []
}

presets字段设定转码规则，官方提供以下的规则集，你可以根据需要安装。

# 最新转码规则
$ npm install --save-dev babel-preset-latest

# react 转码规则
$ npm install --save-dev babel-preset-react

# 不同阶段语法提案的转码规则（共有4个阶段），选装一个
$ npm install --save-dev babel-preset-stage-0
$ npm install --save-dev babel-preset-stage-1
$ npm install --save-dev babel-preset-stage-2
$ npm install --save-dev babel-preset-stage-3

然后，将这些规则加入.babelrc。

  {
    "presets": [
      "latest",
      "react",
      "stage-2"
    ],
    "plugins": []
  }

===================命令行转码babel-cli
将babel-cli安装在项目之中:
$ npm install --save-dev babel-cli
然后，改写package.json。
{
  // ...
  "devDependencies": {
    "babel-cli": "^6.0.0"
  },
  "scripts": {
    "build": "babel src -d lib"
  },
}
转码的时候，就执行下面的命令。
$ npm run build


-------------全局环境下，进行 Babel 转码
安装命令如下:
$ npm install --global babel-cli
基本用法如下:
# 转码结果输出到标准输出
$ babel example.js

# 转码结果写入一个文件
# --out-file 或 -o 参数指定输出文件
$ babel example.js --out-file compiled.js
# 或者
$ babel example.js -o compiled.js

# 整个目录转码
# --out-dir 或 -d 参数指定输出目录
$ babel src --out-dir lib
# 或者
$ babel src -d lib

# -s 参数生成source map文件
$ babel src -d lib -s

===================babel-register
babel-register模块改写require命令，为它加上一个钩子
每当使用require加载.js、.jsx、.es和.es6后缀名的文件，就会先用 Babel 进行转码

$ npm install --save-dev babel-register
使用时，必须首先加载babel-register。
require("babel-register");
require("./index.js");

然后，就不需要手动对index.js转码了。
需要注意的是，babel-register只会对require命令加载的文件转码，而不会对当前文件转码。另外，由于它是实时转码，所以只适合在开发环境使用

===================babel-core
如果某些代码需要调用 Babel 的 API 进行转码，就要使用babel-core模块。

安装命令如下。

$ npm install babel-core --save
然后，在项目中就可以调用babel-core。

var babel = require('babel-core');

// 字符串转码
babel.transform('code();', options);
// => { code, map, ast }

// 文件转码（异步）
babel.transformFile('filename.js', options, function(err, result) {
  result; // => { code, map, ast }
});

// 文件转码（同步）
babel.transformFileSync('filename.js', options);
// => { code, map, ast }

// Babel AST转码
babel.transformFromAst(ast, code, options);
// => { code, map, ast }

var es6Code = 'let x = n => n + 1';
var es5Code = require('babel-core')
  .transform(es6Code, {
    presets: ['latest']
  })
  .code;
// '"use strict";\n\nvar x = function x(n) {\n  return n + 1;\n};'
上面代码中，transform方法的第一个参数是一个字符串，表示需要被转换的 ES6 代码，第二个参数是转换的配置对象

===================在线转换
Babel 提供一个REPL 在线编译器，可以在线将 ES6 代码转为 ES5 代码。
转换后的代码，可以直接作为 ES5 代码插入网页运行。

===================与其他工具的配合
许多工具需要 Babel 进行前置转码，这里举两个例子：ESLint 和 Mocha。

ESLint 用于静态检查代码的语法和风格，安装命令如下。
$ npm install --save-dev eslint babel-eslint

然后，在项目根目录下，新建一个配置文件.eslintrc，在其中加入parser字段。

{
  "parser": "babel-eslint",
  "rules": {
    ...
  }
}
再在package.json之中，加入相应的scripts脚本。

  {
    "name": "my-module",
    "scripts": {
      "lint": "eslint my-files.js"
    },
    "devDependencies": {
      "babel-eslint": "...",
      "eslint": "..."
    }
  }

===================
Google 公司的Traceur转码器，也可以将 ES6 代码转为 ES5 代码