Vue 不支持 IE8 及以下版本，因为 Vue 使用了 IE8 无法模拟的 ECMAScript 5 特性。但它支持所有兼容 ECMAScript 5 的浏览器

推荐在你的浏览器上安装 Vue Devtools。它允许你在一个更友好的界面中审查和调试 Vue 应用

$ npm install vue

# 全局安装 vue-cli
$ npm install --global vue-cli
# 创建一个基于 webpack 模板的新项目
$ vue init webpack my-project
# 安装依赖，走你
$ cd my-project
$ npm run dev



======================
new Vue({
  el: '#app',
  template: '<App/>'
  data: {
      content: "<h1>hello</h1>"
  }
  methods: {
      handleClick: function() {
          this.content = "world"
      }
  }
})

v-test="content" // <h1>hello</h1>
v-html="content" // hello

()=>{alert(111)}
v-on:click="handleClick"
@click="handleClick"
=========================
title 是html属性

属性绑定
v-bind:title="title" // =后面的内容是个js表达式
:title="title"

new Vue({
  el: '#app',
  data: {
      title: "this is title"
      content: "this is content"
  }
})


双向数据绑定
<input v-model="content"/>
<div></div>

=========================
new Vue({
  el: '#app',
  data: {
      first: "this is title",
      second: "this is content",
      count: 0
  },
// 计算属性
  computed: {
      fullName: function() {
          return this.first + ' ' + this.second
      }
  },
  //监听器
  watch: {
      fullName: function() {
          this.count++
      }
  }
})

=========================
v-if//  元素从DOM中被清除
v-show // 元素没有被清除，添加css属性style="display: none;" ###

v-for

new Vue({
  el: '#app',
  data: {
      show: true,
      list: [1, 2, 3]
  }
})

// [1, 2, 3]key不同
<ul>
    <li v-for="item of list" :key="item">{{ item }}</li>
</ul>

// [1, 1, 3]key有相同
<ul>
    <li v-for="(item, index) of list" :key="index">{{ item }}</li>
</ul>

=========================组件
<ul>
// 向组件传递content（父传给子，通过属性）
    <todo-item v-for="(item, index) of list" :key="index" :content="item" :index="index" @delete="handleDelete"></todo-item>
</ul>

<script>

// 组件也是一个vue实例，vue实例也是一个组件
// 全局组件
Vue.component('todo-item', {
    //接收content属性
    props: ['content', 'index'],
    template: '<li @click="handleClick">{{ content }}</li>',
    methods: {
        handleClick: function() {
            // 子与父组件通讯 发布订阅模式
            this.$emit('delete', this.index)
        }
    }
})

// 局部组件
var TodoItem = {
    template: '<li>item</li>'
}

new Vue({
  el: '#app',
  // 引用局部组件
  components: {
      'todo-item': TodoItem
  }
  data: {
      show: true,
  },

  methods: {
      handleDelete: function(index) {
          this.list.splice(index, i)
      }
  }
})

</script>

===========================vue-cli
<script>
import TodoItem from './components/TodoItem'
export default {
    components: {
      'todo-item': TodoItem
    }
    data : function() {
        return {
            inputValue: ''
        }
    },

//es6
    methods: {
        handleSubmit () {

        }
    }

    es6:
    data () {
        return {
            inputValue: ''
        }
    }
}
</script>


TodoItem.vue

<template>
    <li class="item">item</li>
</template>

export default {
    props: ['content']
}

// scoped表示样式只作用于当前组件
<style scoped>
    .item {
        color: green;
    }
</style>