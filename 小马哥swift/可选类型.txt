在OC开发中,如果一个变量暂停不使用,可以赋值为0(基本属性类型)或者赋值为空(对象类型)
在swift开发中,nil也是一个特殊的类型.因为和真实的类型不匹配是不能赋值的(swift是强语言)
但是开发中赋值nil,在所难免.因此推出了可选类型


可选类型的取值:
空值
有值


定义一个可选类型有两种写法
最基本的写法
语法糖(常用)

// 错误写法
// let string : String = nil
// 正确写法:
// 写法一:定义可选类型
let string : Optional<String> = nil

// 写法二:定义可选类型,语法糖(常用)
let string : String? = nil



可选类型的使用
// 演练一:
// 定义可选类型
var string : Optional<String> = nil

// 给可选类型赋值
string = "Hello world"

// 打印结果
print(string)
// 结果:Optional("Hello world")\n
// 因为打印出来的是可选类型,所有会带Optional


// 演练二:
// 取出可选类型的真实值(解包)
print(string!)
// 结果:Hello world\n

// 注意:如果可选类型为nil,强制取出其中的值(解包),会出错
string = nil
print(string!) // 报错

// 正确写法://###
if string != nil {
    print(string!)
}

//可选绑定:判断string是否有值
//如果没有值，就直接跳过｛｝
//如果有值，将可选类型进行解包，并且将解包后的值赋值给str
// 简单写法:为了让在if语句中可以方便使用string
if var str = string {
    print(str)
}




真实应用场景
目的:让代码更加严谨
// 通过该方法创建的URL,可能有值,也可能没有值
// 错误写法:如果返回值是nil时,就不能接收了
let url : NSURL = NSURL(string: "www.520it.com")

// 正确写法:使用可选类型来接收
let url : NSURL? = NSURL(string: "www.520it.com")

// 通过url来创建request对象
if let tempUrl = url {
    let request = NSURLRequest(URL: tempUrl)
}