==========================字符串初始化
html = '''
<div>
    <ul>
         <li class="item-0">first item</li>
         <li class="item-1"><a href="link2.html">second item</a></li>
         <li class="item-0 active"><a href="link3.html"><span class="bold">third item</span></a></li>
         <li class="item-1 active"><a href="link4.html">fourth item</a></li>
         <li class="item-0"><a href="link5.html">fifth item</a></li>
     </ul>
 </div>
'''
from pyquery import PyQuery as pq
doc = pq(html)
print(doc('li'))

==========================URL初始化
from pyquery import PyQuery as pq
doc = pq(url='http://cuiqingcai.com')
print(doc('title'))

或者

from pyquery import PyQuery as pq
import requests
doc = pq(requests.get('http://cuiqingcai.com').text)
print(doc('title'))

==========================文件初始化
from pyquery import PyQuery as pq
doc = pq(filename='demo.html')
print(doc('li'))

==========================基本CSS选择器
html = '''
<div id="container">
    <ul class="list">
         <li class="item-0">first item</li>
         <li class="item-1"><a href="link2.html">second item</a></li>
         <li class="item-0 active"><a href="link3.html"><span class="bold">third item</span></a></li>
         <li class="item-1 active"><a href="link4.html">fourth item</a></li>
         <li class="item-0"><a href="link5.html">fifth item</a></li>
     </ul>
 </div>
'''
from pyquery import PyQuery as pq
doc = pq(html)
print(doc('#container .list li')) # 选取 id 为 container 的节点内部的 class 为 list 的节点内部的所有 li 节点
print(type(doc('#container .list li'))) # <class 'pyquery.pyquery.PyQuery'>

==========================查找节点
1.子节点
from pyquery import PyQuery as pq
doc = pq(html)
items = doc('.list')
print(type(items))
print(items)
lis = items.find('li') # find() 的查找范围是节点的所有子孙节点
print(type(lis)) # 类型是 PyQuery 类型
print(lis)

如果我们只想查找子节点，那可以用 children() 方法：
lis = items.children()
print(type(lis))
print(lis)

比如我们想筛选出子节点中 class 为 active 的节点，可以向 children() 方法传入 CSS 选择器 .active：
lis = items.children('.active')
print(lis)

2.父节点
html = '''
<div class="wrap">
    <div id="container">
        <ul class="list">
             <li class="item-0">first item</li>
             <li class="item-1"><a href="link2.html">second item</a></li>
             <li class="item-0 active"><a href="link3.html"><span class="bold">third item</span></a></li>
             <li class="item-1 active"><a href="link4.html">fourth item</a></li>
             <li class="item-0"><a href="link5.html">fifth item</a></li>
         </ul>
     </div>
 </div>
'''
from pyquery import PyQuery as pq
doc = pq(html)
items = doc('.list')
container = items.parent() # 父节点是该节点的直接父节点,也就是说，它不会再去查找父节点的父节点，即祖先节点
print(type(container))
print(container)

想获取某个祖先节点 可以用 parents() 方法：
from pyquery import PyQuery as pq
doc = pq(html)
items = doc('.list')
parents = items.parents() # 返回所有的祖先节点
print(type(parents))
print(parents)

筛选某个祖先节点
parent = items.parents('.wrap')
print(parent)

3.兄弟节点
from pyquery import PyQuery as pq
doc = pq(html)
li = doc('.list .item-0.active') #第三个 li
print(li.siblings()) #它的兄弟节点有四个，那就是第一、二、四、五个 li 节点

筛选某个兄弟节点
from pyquery import PyQuery as pq
doc = pq(html)
li = doc('.list .item-0.active')
print(li.siblings('.active'))

==========================遍历
PyQuery 的选择结果可能是多个节点，可能是单个节点，类型都是 PyQuery 类型

对于单个节点来说，我们可以直接打印输出，也可直接转成字符串：
from pyquery import PyQuery as pq
doc = pq(html)
li = doc('.item-0.active')
print(li)
print(str(li))


对于多个节点的结果，我们就需要遍历来获取了，例如这里我们把每一个 li 节点进行遍历,，需要调用 items() 方法：
from pyquery import PyQuery as pq
doc = pq(html)
lis = doc('li').items()
print(type(lis))
for li in lis:
    print(li, type(li))

==========================获取信息
1.获取属性

html = '''
<div class="wrap">
    <div id="container">
        <ul class="list">
             <li class="item-0">first item</li>
             <li class="item-1"><a href="link2.html">second item</a></li>
             <li class="item-0 active"><a href="link3.html"><span class="bold">third item</span></a></li>
             <li class="item-1 active"><a href="link4.html">fourth item</a></li>
             <li class="item-0"><a href="link5.html">fifth item</a></li>
         </ul>
     </div>
 </div>
'''
from pyquery import PyQuery as pq
doc = pq(html)
a = doc('.item-0.active a')
print(a, type(a))
print(a.attr('href'))

也可以通过调用 attr 属性来获取属性，用法如下：
print(a.attr.href)

如果我们选中的是多个元素，然后调用 attr() 方法
a = doc('a')
print(a, type(a))
print(a.attr('href'))
print(a.attr.href) #返回的结果却只是第一个。


那么遇到这种情况如果我们想获取所有的 a 节点的属性，就需要用到上文所说的遍历了：
from pyquery import PyQuery as pq
doc = pq(html)
a = doc('a')
for item in a.items():
    print(item.attr('href'))

2.获取文本
html = '''
<div class="wrap">
    <div id="container">
        <ul class="list">
             <li class="item-0">first item</li>
             <li class="item-1"><a href="link2.html">second item</a></li>
             <li class="item-0 active"><a href="link3.html"><span class="bold">third item</span></a></li>
             <li class="item-1 active"><a href="link4.html">fourth item</a></li>
             <li class="item-0"><a href="link5.html">fifth item</a></li>
         </ul>
     </div>
 </div>
'''
from pyquery import PyQuery as pq
doc = pq(html)
a = doc('.item-0.active a')
print(a)
print(a.text()) #它会忽略掉节点内部包含的所有 HTML，只返回纯文字内容

但如果我们想要获取这个节点内部的 HTML 文本，就可以用 html() 方法：
from pyquery import PyQuery as pq
doc = pq(html)
li = doc('.item-0.active')
print(li)
print(li.html()) #li节点内的所有 HTML 文本

如果我们选中的结果是多个节点:
html() 方法返回的是第一个 li 节点的内部 HTML 文本
而 text() 则返回了所有的 li 节点内部纯文本，中间用一个空格分割开，实际上是一个字符串

==========================节点操作
html = '''
<div class="wrap">
    <div id="container">
        <ul class="list">
             <li class="item-0">first item</li>
             <li class="item-1"><a href="link2.html">second item</a></li>
             <li class="item-0 active"><a href="link3.html"><span class="bold">third item</span></a></li>
             <li class="item-1 active"><a href="link4.html">fourth item</a></li>
             <li class="item-0"><a href="link5.html">fifth item</a></li>
         </ul>
     </div>
 </div>
'''
from pyquery import PyQuery as pq
doc = pq(html)
li = doc('.item-0.active')
print(li)
li.removeClass('active')
print(li)
li.addClass('active')
print(li)

### addClass()、removeClass() 这些方法可以动态地改变节点的 class 属性


html = '''
<ul class="list">
     <li class="item-0 active"><a href="link3.html"><span class="bold">third item</span></a></li>
</ul>
'''
from pyquery import PyQuery as pq
doc = pq(html)
li = doc('.item-0.active')
print(li)
li.attr('name', 'link') #attr() 方法来修改属性，第一个参数为属性名，第二个参数为属性值 i 节点多了一个原本不存在的属性 name，其值为 link
print(li)
li.text('changed item') #传入文本之后，发现 li 节点内部的文本就全被改变为传入的字符串文本了
print(li)
li.html('<span>changed item</span>') #li 节点内部又改变为传入的 HTML 文本
print(li)

attr() 方法如果只传入第一个参数属性名，则是获取这个属性值，如果传入第二个参数，可以用来修改属性值
text() 和 html() 方法如果不传参数是获取节点内纯文本和 HTML 文本，如果传入参数则是进行赋值。

1.remove

html = '''
<div class="wrap">
    Hello, World
    <p>This is a paragraph.</p>
 </div>
'''
from pyquery import PyQuery as pq
doc = pq(html)
wrap.find('p').remove()
print(wrap.text()) #只要Hello, World

 append()、empty()、prepend() 等方法

==========================伪类选择器
html = '''
<div class="wrap">
    <div id="container">
        <ul class="list">
             <li class="item-0">first item</li>
             <li class="item-1"><a href="link2.html">second item</a></li>
             <li class="item-0 active"><a href="link3.html"><span class="bold">third item</span></a></li>
             <li class="item-1 active"><a href="link4.html">fourth item</a></li>
             <li class="item-0"><a href="link5.html">fifth item</a></li>
         </ul>
     </div>
 </div>
'''
from pyquery import PyQuery as pq
doc = pq(html)
li = doc('li:first-child')
print(li)
li = doc('li:last-child')
print(li)
li = doc('li:nth-child(2)')
print(li)
li = doc('li:gt(2)')
print(li)
li = doc('li:nth-child(2n)')
print(li)
li = doc('li:contains(second)')
print(li)

依次选择了第一个 li 节点、最后一个 li 节点、第二个 li 节点、第三个 li 之后的 li 节点、偶数位置的 li 节点、包含 second 文本的 li 节点