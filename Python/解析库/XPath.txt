XPath，全称 XML Path Language，即 XML 路径语言，它是一门在XML文档中查找信息的语言。
XPath 最初设计是用来搜寻XML文档的，但是它同样适用于 HTML 文档的搜索。

官网:
https://www.w3.org/TR/xpath/all/

表达式	描述
nodename	选取此节点的所有子节点
/	从当前节点选取直接子节点
//	从当前节点选取子孙节点
.	选取当前节点
..	选取当前节点的父节点
@	选取属性


它就代表选择所有名称为 title，同时属性 lang 的值为 eng 的节点。
//title[@lang=’eng’]

from lxml import etree
text = '''
<div>
    <ul>
         <li class="item-0"><a href="link1.html">first item</a></li>
         <li class="item-1"><a href="link2.html">second item</a></li>
         <li class="item-inactive"><a href="link3.html">third item</a></li>
         <li class="item-1"><a href="link4.html">fourth item</a></li>
         <li class="item-0"><a href="link5.html">fifth item</a>
     </ul>
 </div>
'''
html = etree.HTML(text)
result = etree.tostring(html) //结果是 bytes 类型
print(result.decode('utf-8'))// 转成 str 类型

===========================
也可以直接读取文本文件

from lxml import etree

html = etree.parse('./test.html', etree.HTMLParser())
result = etree.tostring(html)
print(result.decode('utf-8'))


from lxml import etree
html = etree.parse('./test.html', etree.HTMLParser())
result = html.xpath('//*') //选取所有节点
result = html.xpath('//li')// 选取所有 li 节点
result = html.xpath('//li/a')// 选择 li 节点所有直接 a 子节点
result = html.xpath('//ul//a')// 获取 ul 节点下的所有子孙 a 节点
result = html.xpath('//a[@href="link4.html"]/../@class') // href 是 link4.html 的 a 节点，然后再获取其父节点，然后再获取其 class 属性
result = html.xpath('//a[@href="link4.html"]/parent::*/@class')// 也可以通过 parent:: 来获取父节点
print(result)

=============================属性匹配
选取 class 为 item-1 的 li 节点
result = html.xpath('//li[@class="item-0"]')

=============================文本获取
 result = html.xpath('//li[@class="item-0"]/a/text()')

=============================属性获取
获取所有 li 节点下所有 a 节点的 href 属性
result = html.xpath('//li/a/@href')

=============================属性多值匹配
from lxml import etree
text = '''
<li class="li li-first"><a href="link.html">first item</a></li>
'''
html = etree.HTML(text)
result = html.xpath('//li[@class="li"]/a/text()')
print(result) // 无法匹配

// 正确写法
from lxml import etree
text = '''
<li class="li li-first"><a href="link.html">first item</a></li>
'''
html = etree.HTML(text)
result = html.xpath('//li[contains(@class, "li")]/a/text()')# 第一个参数传入属性名称，第二个参数传入属性值
print(result)

=============================多属性匹配
from lxml import etree
text = '''
<li class="li li-first" name="item"><a href="link.html">first item</a></li>
'''
html = etree.HTML(text)
result = html.xpath('//li[contains(@class, "li") and @name="item"]/a/text()')
print(result)


运算符	描述	实例	返回值
or	或	price=9.80 or price=9.70	如果 price 是 9.80，则返回 true。如果 price 是 9.50，则返回 false。
and	与	price>9.00 and price<9.90	如果 price 是 9.80，则返回 true。如果 price 是 8.50，则返回 false。
mod	计算除法的余数	5 mod 2	1
\		计算两个节点集	//book \	//cd	返回所有拥有 book 和 cd 元素的节点集
+	加法	6 + 4	10
-	减法	6 - 4	2
*	乘法	6 * 4	24
div	除法	8 div 4	2
=	等于	price=9.80	如果 price 是 9.80，则返回 true。如果 price 是 9.90，则返回 false。
!=	不等于	price!=9.80	如果 price 是 9.90，则返回 true。如果 price 是 9.80，则返回 false。
<	小于	price<9.80	如果 price 是 9.00，则返回 true。如果 price 是 9.90，则返回 false。
<=	小于或等于	price<=9.80	如果 price 是 9.00，则返回 true。如果 price 是 9.90，则返回 false。
>	大于	price>9.80	如果 price 是 9.90，则返回 true。如果 price 是 9.80，则返回 false。
>=	大于或等于	price>=9.80	如果 price 是 9.90，则返回 true。如果 price 是 9.70，则返回 false。

=============================按序选择
from lxml import etree

text = '''
<div>
    <ul>
         <li class="item-0"><a href="link1.html">first item</a></li>
         <li class="item-1"><a href="link2.html">second item</a></li>
         <li class="item-inactive"><a href="link3.html">third item</a></li>
         <li class="item-1"><a href="link4.html">fourth item</a></li>
         <li class="item-0"><a href="link5.html">fifth item</a>
     </ul>
 </div>
'''
html = etree.HTML(text)
result = html.xpath('//li[1]/a/text()')
print(result)
result = html.xpath('//li[last()]/a/text()')
print(result)
result = html.xpath('//li[position()<3]/a/text()') # 位置序号为 1 和 2 的节点
print(result)
result = html.xpath('//li[last()-2]/a/text()') # 倒数第三个
print(result)


序号是以 1 开头的

=============================节点轴选择
from lxml import etree

text = '''
<div>
    <ul>
         <li class="item-0"><a href="link1.html"><span>first item</span></a></li>
         <li class="item-1"><a href="link2.html">second item</a></li>
         <li class="item-inactive"><a href="link3.html">third item</a></li>
         <li class="item-1"><a href="link4.html">fourth item</a></li>
         <li class="item-0"><a href="link5.html">fifth item</a>
     </ul>
 </div>
'''
html = etree.HTML(text)
result = html.xpath('//li[1]/ancestor::*')
print(result)
result = html.xpath('//li[1]/ancestor::div')
print(result)
result = html.xpath('//li[1]/attribute::*') # attribute 轴
print(result)
result = html.xpath('//li[1]/child::a[@href="link1.html"]') # child 轴
print(result)
result = html.xpath('//li[1]/descendant::span') # descendant 轴,可以获取所有子孙节点
print(result)
result = html.xpath('//li[1]/following::*[2]') # following 轴，可以获取当前节点之后的所有节点,只获取了第二个后续节点
print(result)
result = html.xpath('//li[1]/following-sibling::*') #following-sibling 轴，可以获取当前节点之后的所有同级节点
print(result)

调用了 ancestor 轴，可以获取所有祖先节点，其后需要跟两个冒号，然后是节点的选择器，这里我们直接使用了 *，表示匹配所有节点