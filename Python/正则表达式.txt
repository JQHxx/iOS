http://tool.oschina.net/regex/

URL用下面的正则表达式匹配：[a-zA-z]+://[^\s]*

匹配

在正则表达式中，如果直接给出字符，就是精确匹配。用\d可以匹配一个数字，\w可以匹配一个字母或数字，所以：

'00\d'可以匹配'007'，但无法匹配'00A'；
'\d\d\d'可以匹配'010'；
'\w\w\d'可以匹配'py3'；


.可以匹配任意字符：
'py.'可以匹配'pyc'、'pyo'、'py!'等等。
.：匹配除换行符以外的任意一个字符，例如：”a.c” 可以完全匹配 “abc”，也可以匹配 “abcef” 中的 “abc”

\： 转义字符
1\.2 可以匹配 1.2

要匹配变长的字符，在正则表达式中，用*表示任意个字符（包括0个），用+表示至少一个字符，用?表示0个或1个字符，用{n}表示n个字符，用{n,m}表示n-m个字符：

\d{3}\s+\d{3,8}
我们来从左到右解读一下：
\d{3}表示匹配3个数字，例如'010'；
\s可以匹配一个空格（也包括Tab等空白符），所以\s+表示至少有一个空格，例如匹配' '，' '等；
\d{3,8}表示3-8个数字，例如'1234567'。

可以匹配以任意个空格隔开的带区号的电话号码。

如果要匹配'010-12345'这样的号码呢？由于'-'是特殊字符，在正则表达式中，要用'\'转义，所以，上面的正则是\d{3}\-\d{3,8}


>>> re.match(r"a.c", "abc").group()
'abc'
>>> re.match(r"a.c", "abcef").group()
'abc'
>>> re.match(r"1\.2", "1.2").group()
'1.2'
>>> re.match(r"a[0-9]b", "a2b").group()
'a2b'
>>> re.match(r"a[0-9]b", "a5b11").group()
'a5b'
>>> re.match(r"a[.*?]b", "a.b").group()
'a.b'
>>> re.match(r"abc[^\w]", "abc!123").group()
'abc!
group 方法返回原字符串(abcef)中与正则表达式相匹配的那部分子字符串(abc)，提前是要匹配成功 match 方法才会返回 Match 对象，进而才有group方法

span() 方法可以输出匹配的范围

match() 方法是从字符串的开头开始匹配，一旦开头不匹配，那么整个匹配就失败了
search()，它在匹配时会扫描整个字符串，然后返回第一个成功匹配的结果

import re

content = 'Extra stings Hello 1234567 World_This is a Regex Demo Extra stings'
result = re.match('Hello.*?(\d+).*?Demo', content)
print(result)// None

=============做更精确地匹配，可以用[]表示范围
[0-9a-zA-Z\_]可以匹配一个数字、字母或者下划线；
[0-9a-zA-Z\_]+可以匹配至少由一个数字、字母或者下划线组成的字符串，比如'a100'，'0_Z'，'Py3000'等等；
[a-zA-Z\_][0-9a-zA-Z\_]*可以匹配由字母或下划线开头，后接任意个由一个数字、字母或者下划线组成的字符串，也就是Python合法的变量；
[a-zA-Z\_][0-9a-zA-Z\_]{0, 19}更精确地限制了变量的长度是1-20个字符（前面1个字符+后面最多19个字符）。

在 “[]” 中的特殊字符不再有特殊意义，就是它字面的意义，例如：[.*]就是匹配 . 或者 *

[^…]，字符集取反，表示只要不是括号中出现的字符都可以匹配，例如：a[^bcd]e 可匹配 aee、afe等

A|B可以匹配A或B，所以(P|p)ython可以匹配'Python'或者'python'。

^表示行的开头，^\d表示必须以数字开头。
$表示行的结束，\d$表示必须以数字结束。

====================修饰符
. 匹配的是除换行符之外的任意字符，当遇到换行符时，.*? 就不能匹配了
content = '''Hello 1234567 World_This
is a Regex Demo
'''
result = re.match('^He.*?(\d+).*?Demo$', content, re.S)
在 match() 方法的第三个参数传入 re.S，它的作用是使 . 匹配包括换行符在内的所有字符。

这个 re.S 在网页匹配中会经常用到，因为 HTML 节点经常会有换行，加上它我们就可以匹配节点与节点之间的换行了。

修饰符	描述
re.I	使匹配对大小写不敏感
re.L	做本地化识别（locale-aware）匹配
re.M	多行匹配，影响 ^ 和 $
re.S	使 . 匹配包括换行在内的所有字符
re.U	根据Unicode字符集解析字符。这个标志影响 \w, \W, \b, \B.
re.X	该标志通过给予你更灵活的格式以便你将正则表达式写得更易于理解。

====================转义匹配
import re

content = '(百度)www.baidu.com'
result = re.match('\(百度\)www\.baidu\.com', content)
print(result)

====================re模块
>>> foo = "hello"
>>> bar = r"hello"
前者是常规字符串，后者 r 开头的是原始字符串
“\n” 是一个转义字符，它在 ASCII 中表示换行符。而 r”\n” 是一个原始字符串，原始字符串不对特殊字符进行转义，它就是你看到的字面意思，由 “\” 和 “n” 两个字符组成的字符串。
定义原始字符串可以用小写r或者大写R开头

>>> foo = "\\b"
>>> bar = r"\b"
>>> foo == bar
True

Python提供re模块，包含所有正则表达式的功能。由于Python的字符串本身也用\转义
s = 'ABC\\-001' # Python的字符串
# 对应的正则表达式字符串变成：
# 'ABC\-001'

强烈建议使用Python的r前缀，就不用考虑转义的问题了：
s = r'ABC\-001' # Python的字符串
# 对应的正则表达式字符串不变：
# 'ABC\-001'

match()方法判断是否匹配，如果匹配成功，返回一个Match对象，否则返回None

======================切分字符串
>>> 'a b   c'.split(' ')
['a', 'b', '', '', 'c']

无法识别连续的空格，用正则表达式试试：
>>> re.split(r'\s+', 'a b   c')
['a', 'b', 'c']

>>> re.split(r'[\s\,]+', 'a,b, c  d')
['a', 'b', 'c', 'd']

======================分组
用()表示的就是要提取的分组（Group）

 (abc){2} 表示匹配abc两次

 匹配一个IP地址时，可以使用 (\d{1,3}.){3}\d{1,3}，因为IP是由4组数组3个点组成的 如：192.168.0.1

^(\d{3})-(\d{3,8})$分别定义了两个组，可以直接从匹配的字符串中提取出区号和本地号码：

>>> m = re.match(r'^(\d{3})-(\d{3,8})$', '010-12345')
>>> m
<_sre.SRE_Match object; span=(0, 9), match='010-12345'>
>>> m.group(0)
'010-12345'
>>> m.group(1)
'010'
>>> m.group(2)
'12345'

注意到group(0)永远是原始字符串，group(1)、group(2)……表示第1、2、……个子串。


>>> t = '19:05:30'
>>> m = re.match(r'^(0[0-9]|1[0-9]|2[0-3]|[0-9])\:(0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|[0-9])\:(0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|[0-9])$', t)
>>> m.groups()
('19', '05', '30')


分组还可以通过指定名字的方式获取:
# 第一个分组的名字是number
# 第二个分组的名字是char
>>> m = re.match(r"(?P<number>\d+)(?P<char>\w+)", "123abc")
>>> m.group("number")
'123'
# 等价
>>> m.group(1)
'123'

======================贪婪匹配
最后需要特别指出的是，正则匹配默认是贪婪匹配，也就是匹配尽可能多的字符。举例如下，匹配出数字后面的0
>>> re.match(r'^(\d+)(0*)$', '102300').groups()
('102300', '')

由于\d+采用贪婪匹配，直接把后面的0全部匹配了，结果0*只能匹配空字符串了。

必须让\d+采用非贪婪匹配（也就是尽可能少匹配），才能把后面的0匹配出来，加个?就可以让\d+采用非贪婪匹配：
>>> re.match(r'^(\d+?)(0*)$', '102300').groups()
('1023', '00')


我们希望尽可能少的匹配,只需要在量词后面加一个问号” ？”
=======================编译
当我们在Python中使用正则表达式时，re模块内部会干两件事情：
编译正则表达式，如果正则表达式的字符串本身不合法，会报错；
用编译后的正则表达式去匹配字符串。

如果一个正则表达式要重复使用几千次，出于效率的考虑，我们可以预编译该正则表达式，接下来重复使用时就不需要编译这个步骤了，直接匹配：

>>> import re
# 编译:
>>> re_telephone = re.compile(r'^(\d{3})-(\d{3,8})$')
# 使用：
>>> re_telephone.match('010-12345').groups()
('010', '12345')
>>> re_telephone.match('010-8086').groups()
('010', '8086')

=========================预设元字符
\w 匹配任意一个单词字符，包括数字和下划线，它等价于 [A-Za-z0-9_]，例如 a\wc 可以匹配 abc、acc
\W 匹配任意一个非单词字符，与 \w 操作相反，它等价于 [^A-Za-z0-9_]，例如： a\Wc 可匹配 a!c
\s 匹配任意一个空白字符，空格、回车等都是空白字符，例如：a\sc 可以配 a\nc，这里的 \n表示回车
\S 匹配任意一个非空白字符
\d 匹配任意一个数字，它等价于[0-9]，例如：a\dc 可匹配 a1c、a2c …
\D 匹配任意一个非数字

=========================re.match(pattern, string)
match 方法从字符串的起始位置开始检查，如果刚好有一个子字符串与正则表达式相匹配，则返回一个Match对象，只要起始位置不匹配则退出，不再往后检查了，返回 None

>>> re.match(r"b.r", "foobar") # 不匹配
>>> re.match(r"b.r", "barfoo")   # 匹配

=========================re.search(pattern, string)
search 方法虽然也是从起始位置开始检查，但是它在起始位置不匹配的时候会一直尝试往后检查，直到匹配为止，如果到字符串的末尾还没有匹配，则返回 None
它们都是在一旦匹配了第一个子字符串，就不再往后匹配了

>>> re.search(r"b.r", "foobar") # 匹配
<_sre.SRE_Match object at 0x000000000254D578>
>>> re.match(r"b.r", "foobr")  # 不匹配

不管是 search 还是 match，一旦找到了匹配的子字符串，就立刻停止往后找，哪怕字符串中有多个可匹配的子字符串
>>> re.search(r"f.o", "foobarfeobar").group()
'foo'

search 方法可用于判断字符串中是否包含有与正则表达式相匹配的子字符串，还可以从中提出匹配的子字符串

不加$，就可以判断是否完全匹配字符串呢？
>>> rex = r"[\w]+@[\w]+\.[\w]+"
>>> re.fullmatch(rex, "123@qq.com is my email") # 不匹配
>>> re.fullmatch(rex, "123@qq.com") # 匹配

=========================re.findall(pattern, string)
>>> emails = re.findall(rex, "email is 123@qq.com, anthor email is abc@gmail.com")
>>> emails
['123@qq.com', 'abc@gmail.com']

findall 返回的对象是由匹配的子字符串组成的列表，它返回了所有匹配的邮件地址。

=========================re.finditer(pattern, string)
>>> emails = re.finditer(rex, "email is 123@qq.com, anthor email is abc@gmail.com")
>>> emails
<callable-iterator object at 0x0000000002592390>
>>> for e in emails:
...     print(e.group())
...
123@qq.com
abc@gmail.com

finditer 返回的对象是由 Match 对象组成的迭代器，因为里面的元素是Match对象

=========================re.split
我们都知道字符串有一个split方法，可根据某个子串分隔字符串，如：

>>> "this is a string.".split(" ")
['this', 'is', 'a', 'string.']

>>> words = re.split(r"\W+", "this is a string.")
>>> words
['this', 'is', 'a', 'string', '']

=========================re.sub(pattern, repl, string)
re 模块还提供了一种更高级的字符串替换操作，凡是 string.replace 没法满足的需求的情况，应该考虑用正则表达式来处理

>>> rex = r"[\w]+@[\w]+\.[\w]+" # 邮件地址正则
>>> re.sub(rex, "admin@qq.com", "234@qq.com, 456@qq.com ")
'admin@qq.com, admin@qq.com '



html = """
        ...
        <img src="/images/category.png">
        this is anthor words
        <img src="http://foofish.net/images/js_framework.png">
       """
rex = r'.*?<img src="(.*?)" .*?="">'

这里我们要把替换目标 repl 作为函数来处理。

def fun(m):
    img_tag = m.group()
    src = m.group(1)
    if not src.startswith("http:"):
        full_src = "http://foofish.net" + src
    else:
        full_src = src
    new_img_tag = img_tag.replace(src, full_src)
    return new_img_tag

new_html = re.compile(rex).sub(fun, html)
print(new_html)
# 输出
...
<img src="http://foofish.net/images/category.png">
this is anthor words
<img src="http://foofish.net/images/js_framework.png">

如果还想知道替换次数是多少，那么可以使用 re.subn方法

re.I(IGNORECASE): 忽略大小写（括号内的单词为完整写法，两种方式都支持）
re.M(MULTILINE): 多行模式，改变’^’和’$’的行为
re.S(DOTALL): 改变’.’的行为，默认 . 只能匹配除换行之外的字符，加上它就可以匹配换行了

>>> re.match(r"foo", "FoObar", re.I)
<_sre.SRE_Match object; span=(0, 3), match='FoO'>
>>>

re.match(r'foo', 'foo bar')
等价于
pattern = re.compile(r'foo')
pattern.match('foo bar')