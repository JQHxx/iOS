Python中，一个.py文件就称之为一个模块（Module）

为了避免模块名冲突:
Python又引入了按目录来组织模块的方法，称为包（Package）


mycompany
├─ __init__.py
├─ abc.py
└─ xyz.py
abc.py模块的名字就变成了mycompany.abc
每一个包目录下面都会有一个__init__.py的文件，这个文件是必须存在的,否则，Python就把这个目录当成普通目录，而不是一个包
__init__.py可以是空文件，也可以有Python代码，因为__init__.py本身就是一个模块，而它的模块名就是mycompany。


mycompany
 ├─ web
 │  ├─ __init__.py
 │  ├─ utils.py
 │  └─ www.py
 ├─ __init__.py
 ├─ abc.py
 └─ xyz.py
文件www.py的模块名就是mycompany.web.www，两个文件utils.py的模块名分别是mycompany.utils和mycompany.web.utils。
mycompany.web也是一个模块

======================
Python本身就内置了很多非常有用的模块

'a test module' // 任何模块代码的第一个字符串都被视为模块的文档注释；
__author__ = 'ndl' // 使用__author__变量把作者写进去，这样当你公开源代码后别人就可以瞻仰你的大名；

import sys

导入sys模块后，我们就有了变量sys指向该模块，利用sys这个变量，就可以访问sys模块的所有功能
sys模块有一个argv变量，用list存储了命令行的所有参数。argv至少有一个元素，因为第一个参数永远是该.py文件的名称

运行python3 hello.py获得的sys.argv就是['hello.py']；
运行python3 hello.py ndl获得的sys.argv就是['hello.py', 'ndl']。

if __name__=='__main__':
    test()
当我们在命令行运行hello模块文件时，Python解释器把一个特殊变量__name__置为__main__,而如果在其他地方导入该hello模块时，if判断将失败
因此，这种if测试可以让一个模块通过命令行运行时执行一些额外的代码，最常见的就是运行测试。

>>> import hello
>>> hello.test()

=======================作用域
正常的函数和变量名是公开的（public），可以被直接引用
类似__xxx__这样的变量是特殊变量，可以被直接引用，但是有特殊用途，比如上面的__author__，__name__就是特殊变量
文档注释也可以用特殊变量__doc__访问，我们自己的变量一般不要用这种变量名；

类似_xxx和__xxx这样的函数或变量就是非公开的（private），不应该被直接引用，比如_abc，__abc
private函数和变量“不应该”被直接引用，而不是“不能”被直接引用，是因为Python并没有一种方法可以完全限制访问private函数或变量


def _private_1(name):
    return 'Hello, %s' % name

def _private_2(name):
    return 'Hi, %s' % name

def greeting(name):
    if len(name) > 3:
        return _private_1(name)
    else:
        return _private_2(name)
我们在模块里公开greeting()函数，而把内部逻辑用private函数隐藏起来了，这样，调用greeting()函数不用关心内部的private函数细节，这也是一种非常有用的代码封装和抽象的方法