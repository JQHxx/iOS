网页可以分为三大部分，HTML、CSS、JavaScript

HTML 是用来描述网页的一种语言，其全称叫做 Hyper Text Markup Language，即超文本标记语言。
CSS，全称叫做 Cascading Style Sheets，即层叠样式表。
JavaScript，简称为 JS，是一种脚本语言，HTML 和 CSS 配合使用，提供给用户的只是一种静态的信息，缺少交互性。

在 HTML 中，所有标签定义的内容都是节点，它们构成了一个 HTML DOM 树
DOM，英文全称 Document Object Model，即文档对象模型。它定义了访问 HTML 和 XML 文档的标准：

HTML 文档中的所有内容都是节点：
整个文档是一个文档节点
每个 HTML 元素是元素节点
HTML 元素内的文本是文本节点
每个 HTML 属性是属性节点
注释是注释节点

通过 HTML DOM，树中的所有节点均可通过 JavaScript 进行访问，所有 HTML 节点元素均可被修改，也可以被创建或删除。

节点树中的节点彼此拥有层级关系。我们常用 parent（父）、child（子）和 sibling（兄弟）等术语用于描述这些关系。父节点拥有子节点，同级的子节点被称为兄弟节点。

在节点树中，顶端节点被称为根（root），除了根节点之外每个节点都有父节点，同时可拥有任意数量的子节点或兄弟节点。

CSS 选择器还支持嵌套选择，各个选择器之间加上空格分隔开便可以代表嵌套关系，如 #container .wrapper p 则代表选择 id 为 container 内部的 class 为 wrapper 内部的 p 节点。
另外如果不加空格则代表并列关系，如 div#container .wrapper p.text 代表选择 id 为 container 的 div 节点内部的 class 为 wrapper 节点内部的 class 为 text 的 p 节点。

选择器	例子	例子描述
.class	.intro	选择 class="intro" 的所有节点。
#id	#firstname	选择 id="firstname" 的所有节点。
*	*	选择所有节点。
element	p	选择所有 p 节点。
element,element	div,p	选择所有 div 节点和所有 p 节点。
element element	div p	选择 div 节点内部的所有 p 节点。
element>element	div>p	选择父节点为 div 节点的所有 p 节点。
element+element	div+p	选择紧接在 div 节点之后的所有 p 节点。
[attribute]	[target]	选择带有 target 属性所有节点。
[attribute=value]	[target=blank]	选择 target="blank" 的所有节点。
[attribute~=value]	[title~=flower]	选择 title 属性包含单词 "flower" 的所有节点。
:link	a:link	选择所有未被访问的链接。
:visited	a:visited	选择所有已被访问的链接。
:active	a:active	选择活动链接。
:hover	a:hover	选择鼠标指针位于其上的链接。
:focus	input:focus	选择获得焦点的 input 节点。
:first-letter	p:first-letter	选择每个 p 节点的首字母。
:first-line	p:first-line	选择每个 p 节点的首行。
:first-child	p:first-child	选择属于父节点的第一个子节点的每个 p 节点。
:before	p:before	在每个 p 节点的内容之前插入内容。
:after	p:after	在每个 p 节点的内容之后插入内容。
:lang(language)	p:lang	选择带有以 "it" 开头的 lang 属性值的每个 p 节点。
element1~element2	p~ul	选择前面有 p 节点的每个 ul 节点。
[attribute^=value]	a[src^="https"]	选择其 src 属性值以 "https" 开头的每个 a 节点。
[attribute$=value]	a[src$=".pdf"]	选择其 src 属性以 ".pdf" 结尾的所有 a 节点。
[attribute*=value]	a[src*="abc"]	选择其 src 属性中包含 "abc" 子串的每个 a 节点。
:first-of-type	p:first-of-type	选择属于其父节点的首个 p 节点的每个 p 节点。
:last-of-type	p:last-of-type	选择属于其父节点的最后 p 节点的每个 p 节点。
:only-of-type	p:only-of-type	选择属于其父节点唯一的 p 节点的每个 p 节点。
:only-child	p:only-child	选择属于其父节点的唯一子节点的每个 p 节点。
:nth-child(n)	p:nth-child	选择属于其父节点的第二个子节点的每个 p 节点。
:nth-last-child(n)	p:nth-last-child	同上，从最后一个子节点开始计数。
:nth-of-type(n)	p:nth-of-type	选择属于其父节点第二个 p 节点的每个 p 节点。
:nth-last-of-type(n)	p:nth-last-of-type	同上，但是从最后一个子节点开始计数。
:last-child	p:last-child	选择属于其父节点最后一个子节点每个 p 节点。
:root	:root	选择文档的根节点。
:empty	p:empty	选择没有子节点的每个 p 节点（包括文本节点）。
:target	#news:target	选择当前活动的 #news 节点。
:enabled	input:enabled	选择每个启用的 input 节点。
:disabled	input:disabled	选择每个禁用的 input 节点
:checked	input:checked	选择每个被选中的 input 节点。
:not(selector)	p:not	选择非 p 节点的每个节点。
::selection	::selection	选择被用户选取的节点部分。

================JavaScript渲染页面
有时候我们在用 Urllib 或 Requests 抓取网页时，得到的源代码实际和浏览器中看到的是不一样的。
这个问题是一个非常常见的问题，现在网页越来越多地采用 Ajax、前端模块化工具来构建网页，整个网页可能都是由 JavaScript 渲染出来的，意思就是说原始的 HTML 代码就是一个空壳

<!DOCTYPE html>
<html>
    <head>
        <meta charset="UTF-8">
        <title>This is a Demo</title>
    </head>
    <body>
        <div id="container">
        </div>
    </body>
    <script src="app.js"></script>
</html>
body 节点里面只有一个 id 为 container 的节点，但是注意到在 body 节点后引入了一个 app.js，这个便负责了整个网站的渲染。

在浏览器打开这个页面时，首先会加载这个 HTML 内容，接着浏览器会发现其中里面引入了一个 app.js 文件，然后浏览器便会接着去请求这个文件，获取到该文件之后便会执行其中的 JavaScript 代码，而 JavaScript 则会改变 HTML 中的节点，向内添加内容，最后得到完整的页面。

在浏览器打开这个页面时，首先会加载这个 HTML 内容，接着浏览器会发现其中里面引入了一个 app.js 文件，然后浏览器便会接着去请求这个文件，获取到该文件之后便会执行其中的 JavaScript 代码，而 JavaScript 则会改变 HTML 中的节点，向内添加内容，最后得到完整的页面。

这也解释了为什么有时我们得到的源代码和浏览器中看到的是不一样的。

所以使用基本 HTTP 请求库得到的结果源代码可能跟浏览器中的页面源代码不太一样。对于这样的情况，我们可以分析其后台 Ajax 接口，也可使用 Selenium、Splash 这样的库来实现模拟 JavaScript 渲染，这样我们便可以爬取 JavaScript 渲染的网页的内容了。