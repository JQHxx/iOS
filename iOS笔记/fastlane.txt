https://github.com/fastlane/fastlane
https://docs.fastlane.tools/

https://www.jianshu.com/p/1e26a6688b8a

export:
显示所有的环境变量

export 可新增，修改或删除环境变量，供后续执行的程序使用
export 的效力仅限于该次登陆操作
# export -p //列出当前的环境变量值
# export MYENV //定义环境变量
定义环境变量赋值
# export MYENV=7 //定义环境变量并赋值


https://docs.fastlane.tools/actions


======================================================================bundle
bundle --help

bundle exec [OPTIONS]          # Run the command in context of the bundle

bundle install [OPTIONS]       # Install the current environment to the system

bundle update [OPTIONS]        # Update the current environment
// ###bundle命令操作 可以联想cocoapods的pod 两者类似###
处于Gemfile文件夹的路径：bundle env
// 更新fastlane
bundle update fastlane

Update your plugins:
Run fastlane update_plugins to make sure to have all the latest plugins and their dependencies installed.

Use bundle exec:
Run fastlane using bundle exec fastlane [lane] to make sure your plugins are properly loaded.
This is required when you use plugins from a local path or a git remote.

======================================================================environment variables

Set up environment variables:
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8
You can find your shell profile at ~/.bashrc, ~/.bash_profile, ~/.profile or ~/.zshrc depending on your system

检查Ruby版本，需要2.0及以上版本:
ruby -v

检查Xcode命令行工具是否安装:
xcode-select --install

-------------------------------------------Install Start
Install fastlane using:
# Using RubyGems
sudo gem install fastlane -NV // ##推荐## 推荐用RubyGems安装
# Alternatively using Homebrew
brew install fastlane
或者
通过bundle来管理Gemfile来安装fastlane && cocoapods
Use a Gemfile
It is recommended that you use a Gemfile to define your dependency on fastlane
Create a ./Gemfile in the root directory of your project with the content
source "https://rubygems.org"
gem "fastlane"

Run [sudo] bundle update and add both the ./Gemfile and the ./Gemfile.lock to version control
Every time you run fastlane, use bundle exec fastlane [lane]
On your CI, add [sudo] bundle install as your first build step
To update fastlane, just run [sudo] bundle update fastlane
-------------------------------------------Install End

============================================================fastlane 命令
fastlane -v
fastlane -h

cd /Users/youdone-ndl/Desktop/fv-app-apple/AiJiaSuClientIos/fastlane
cd /Users/youdone-ndl/Desktop/fv-app-apple/AiJiaSuClientIos
fastlane lanes // 查看所有的lanes

fastlane [lane] --verbose # will show a lot more information that might be useful to resolve the issue.

identifier = get_info_plist_value(path: "./Info.plist", key: "CFBundleIdentifier")
fastlane action get_info_plist_value
fastlane run get_info_plist_value

Actions:
http://docs.fastlane.tools/advanced/actions/

Lanes:
http://docs.fastlane.tools/advanced/lanes/

============================================================fastlane init
ADC为开发者网站，ITC是ItunesConnect网站

在证书都配置好的情况下
Navigate your terminal to your project's directory and run:
fastlane init

Multiple App Store Connect teams found, please enter the number of the team you want to use:
1) "FLYVPN LIMITED" (118783449)
2) "Shanghai Youdun Network Technology Co., Ltd" (118361933)
Multiple teams found on the Developer Portal, please enter the number of the team you want to use:
1) YVJM8BZ3H5 "FLYVPN LIMITED" (Company/Organization)
2) N82WKSN6R7 "Shanghai Youdun Network Technology Co., Ltd" (Company/Organization)

Logging in with your Apple ID was successful
Your app 'com.aijiasuinc.AiJiaSuClient' is available in your Apple Developer Portal
Your app 'com.aijiasuinc.AiJiaSuClient' is available on App Store Connect

选择允许fastlane管理ITC上的元数据后，会将ITC上的所有元数据与截图下载到metadata和screenshots文件夹
Would you like fastlane to manage your app's metadata?
y

如果Deliverfile，screenshots和metadata目录没被创建，可以运行deliver init来创建。
下载iTC上的截图deliver download_screenshots,下载iTC上的元数据 deliver download_metadata

Successfully created new configuration files.
Successfully downloaded large app icon
Successfully downloaded all existing screenshots
Successfully created new Deliverfile at path './fastlane/Deliverfile'
Successfully generated fastlane configuration
fastlane lanes
How to customize your Fastfile：https://docs.fastlane.tools/actions

============================================================文件配置
1、配置.env
https://docs.fastlane.tools/advanced/other/#environment-variables
2、配置Appfile
Appfile文件用于指定 app_identifier, apple_id, team_id, itc_team_id等一些fastlane需要用到的信息
https://docs.fastlane.tools/advanced/Appfile/

The Appfile stores useful information that are used across all fastlane tools like your Apple ID or the application Bundle Identifier, 
to deploy your lanes faster and tailored on your project needs.
ex:
app_identifier "net.sunapps.1" # The bundle identifier of your app
apple_id "felix@krausefx.com"  # Your Apple email address
3、配置Deliverfile
https://docs.fastlane.tools/actions/deliver/
用于配置应用在 ITC 中的元数据信息
4、配置Fastfile
fastlane 中的块和lane
我们打包、发布等操作都是通过这个文件来执行

Fastfile里面包含的块类型有以下几种：
before_all 用于执行任务之前的操作，比如使用cocopods更新pod库，只执行一次
before_each 每次执行 lane 之前都会执行一次
lane 定义用户的主要任务流程。例如打包ipa，执行测试等等
after_each 每次执行 lane 之后都会执行一次
after_all 用于执行任务之后的操作，比如发送邮件，通知之类的
error 在执行上述情况任意环境报错都会中止并执行一次

lane的组成:


============================================================ENV用法
https://docs.fastlane.tools/advanced/other/#environment-variables

You can define environment variables in a .env or .env.default file in the same directory as your Fastfile
Environment variables are loaded using dotenv：https://github.com/bkeepers/dotenv

ex:
WORKSPACE=YourApp.xcworkspace

我们可以在fastlane下创建一个名为.env 的文件，自定义所需的临时变量
然后Fastlane的三个配置文件（Appfile、Deliverfile和Fastfile）分别从.env文件中通过ENV['xxxx']读取配置信息。

.env文件为隐藏文件，可使用如下命令查看：
$ defaults write com.apple.finder AppleShowAllFiles -boolean true;
$ killall Finder

fastlane also has a --env option that allows loading of environment specific dotenv files
.env and .env.default will be loaded before environment specific dotenv files are loaded
The naming convention for environment specific dotenv files is .env.<environment>
For example, fastlane <lane-name> --env development will load .env, .env.default, and .env.development
Alternatively, as environment variables are not a fastlane specific thing, you can also use standard methods to set them:
DELIVER_USER="felix@krausefx.com" fastlane test
or
export DELIVER_USER="felix@krausefx.com";
fastlane test
Although it kind of defeats the purpose of using them in the first place (not to have their content in any files), you can also set them in your Fastfile:
ENV["DELIVER_USER"] = "felix@krausefx.com"

  #APP唯一标识符
  APP_IDENTIFIER = "com.xxx.xx"

  #苹果开发者账号
  APPLE_ID = "xx@xxx.com"
  
  #ADC Team ID
  TEAM_ID = "CN*****SEU"

  #ITC Team ID
  ITC_TEAM_ID = "11*****89"

  #设置shell的语言环境
  LANG = "en_US.UTF-8"
  LC_ALL = "en_US.UTF-8"

  #工程名称
  SCHEME_NAME = "YourProjectName"

  #App 元数据及截图存放路径
  METADATA_PATH = "./metadata"
  SCREENSHOTS_PATH = "./screenshots"

  #ipa输出文件夹路径
  OUTPUT_DIRECTORY = "/Users/xx/Desktop/xxx/ipa"

  #App 元数据及截图下载时 直接覆盖 不询问
  DELIER_FORCE_OVERWRITE= true

  #更新描述
  UPDATE_DESCRIPTION = "fastlane自动打包上传测试"

  #自动提交审核
  SUBMIT_FOR_REVIEW = false

  #审核通过后立刻发布
  AUTOMATIC_RELEASE = false

  #PP文件
  PP_ADHOC = "xxxxxx_ADHoc"
  PP_APPSTORE = "xxxxxx_Distribution"

============================================================配置Deliverfile
# The Deliverfile allows you to store various App Store Connect metadata
# For more information, check out the docs
# https://docs.fastlane.tools/actions/deliver/

############################# 基本信息 ####################################

# bundle identifier
app_identifier ENV['APP_IDENTIFIER']

# Apple ID用户名
username ENV['APPLE_ID']

# 版权声明
# copyright "2019 xxx Inc"

# 支持语言
supportedLanguages = {
  "cmn-Hans" => "zh-Hans"
}

# app 名称
# name({
# 'zh-Hans' => "APPDemo"
# })

# 副标题
# subtitle(
#   'zh-Hans' => "小鱼小鱼，虾米虾米"
# )

# App价格
#price_tier 0

# 应用程序图标的路径 1024*1024
app_icon './fastlane/metadata/app_icon.jpg'

# 屏幕截图的文件夹的路径
screenshots_path ENV['SCREENSHOTS_PATH']

# 元数据的路径
metadata_path ENV['METADATA_PATH']


###################################  类别配置 ###################################

# 参考网站https://docs.fastlane.tools/actions/upload_to_app_store/#reference
# 设置 App 的类别.这里可以设置一个主要类别,一个次要类别.

# 主要类别 
primary_category "MZGenre.Lifestyle"
# 主要类别第一个子类别 无
# primary_first_sub_category
# 主要类别第二个子类别 无
# primary_second_sub_category

# 要设置的次要类别
secondary_category "MZGenre.Utilities"
# 设置的次要第一个子类别 无
# secondary_first_sub_category  
# 设置的次要第二个子类别 无
# secondary_second_sub_category


################################## 关键字\描述等信息 ###################################

# 搜索关键字
# keywords(
#  "zh-Hans" => "FastLane, 美女"
# )

# 技术支持网址
# support_url({
#  'zh-Hans' => "http://www.baidu.com"
# })

# 营销网址
#marketing_url({ 
#  'zh-Hans' => "http://www.baidu.com"
#})

# 隐私政策网址
#privacy_url({
#  'zh-Hans' => "http://www.baidu.com"
#})

# 本地化宣传文本信息介绍
#promotional_text( 
#  "zh-Hans" => "本地化宣传文本信息介绍",
#)

# app描述信息
#description({ 
#  'zh-Hans' => "APP的描述信息,用于APP功能的描述和介绍不能少于10个字符"
#})

# 版本描述
#release_notes({
#  'zh-Hans' => "这是第一个版本哦"
#})


################################## 分级 ########################################

#年龄分级配置
#app_rating_config_path "./fastlane/metadata/itunes_rating_config.json" 


################################# 提交审核信息等 #########################################

# 提交审核信息:加密, idfa 等
submission_information({    
    export_compliance_encryption_updated: false,
    export_compliance_uses_encryption: false,
    content_rights_contains_third_party_content: false,
    add_id_info_uses_idfa: false
})

# # 应用审核小组的联系信息 app 审核信息
# app_review_information(
#   first_name: "name",
#   last_name: "name",
#   phone_number: "手机号",
#   email_address: "email",
#   demo_user: "测试账号用户名",
#   demo_password: "测试账号密码",
#   notes: "noting"
# )

# run_precheck_before_submit true

# 在上传新截图之前，先清除所有之前上传的截图
overwrite_screenshots true

# 下载 metadata 及 screenshots 时直接覆盖，不询问
force true

# 不上传截图
skip_screenshots true

# 是否自动提交审核,true表示立马提交审核
submit_for_review ENV['SUBMIT_FOR_REVIEW']

# 审核通过后是否立刻发布,false表示需要手动发布
automatic_release ENV['AUTOMATIC_RELEASE']

============================================================配置Fastfile
Fastfile里面包含的块类型有以下几种：
before_all 用于执行任务之前的操作，比如使用cocopods更新pod库，只执行一次
before_each 每次执行 lane 之前都会执行一次
lane 定义用户的主要任务流程。例如打包ipa，执行测试等等
after_each 每次执行 lane 之后都会执行一次
after_all 用于执行任务之后的操作，比如发送邮件，通知之类的
error 在执行上述情况任意环境报错都会中止并执行一次


我们通俗的把一个lane理解为一个任务，每个任务都负责一个功能。 
然后我们调用不同的任务，来实现打包、上传到testFlight、上传到app store等功能。 
每个任务里可以调用其他的小任务，可以理解为函数，gym、deliver这些Action则是已经给我们封装好的函数。

============================================================action
https://docs.fastlane.tools/actions/

fastlane actions:
To get a list of all available parameters for build_app,run: fastlane action build_app
gym	编译打包生成ipa文件,又名build_ios_app或build_app
building your app using an action called build_app

upload_to_testflight:
To get a list of all available options, run: fastlane action upload_to_testflight

============================================================Fastlane插件管理
https://docs.fastlane.tools/plugins/available-plugins/
https://docs.fastlane.tools/plugins/plugins-troubleshooting/

查找插件:
使用fastlane search_plugins查找所有插件，使用fastlane search_plugins [query]查找指定插件

安装插件:
使用fastlane add_plugin [name]安装插件

会用到的两个插件:
fastlane-plugin-versioning：用来修改build版本号和version版本号。
fastlane-plugin-pgyer：用来上传ipa包到蒲公英。

插件使用方法:
使用fastlane action pgyer 查找某个action的使用方法和参数

Allows to set/get app version and build number directly to/from Info.plist:
fastlane add_plugin versioning

{
Gemfile and Pluginfile:
Your Gemfile should look something like this:
gem "fastlane"

plugins_path = File.join(File.dirname(__FILE__), 'fastlane', 'Pluginfile')
eval_gemfile(plugins_path) if File.exist?(plugins_path)

Your Pluginfile should look something like this:
# Autogenerated by fastlane
gem 'fastlane-plugin-ruby'
}

cd到fastlane文件夹的路径
查看fastlane-plugin-versioning里面action的用法:
fastlane action get_version_number_from_xcodeproj

============================================================两步验证
如果你的苹果账户开启了两步验证，将会自动询问你使用手机进行验证。
结果会话将会存储在 ~/.spaceship/[email]/cookie中。这个会话在一个月内是有效的

使用以下命令生成一个web session：
fastlane spaceauth -u user@example.org

这个将会给你授权，并提供一个会话字符串：
export FASTLANE_SESSION='---\n- !ruby/object:HTTP::Cookie\n  name: DES5c148586dfd451e55afbaaa5f62418f91\n  value: HSARMTKNSRVTWFla1+yO4gVPowH17VaaaxPFnUdMUegQZxqy1Ie1c2v6bM1vSOzIbuOmrl/FNenlScsd/NbF7/Lw4cpnL15jsyg0TOJwP32tC/NguPiyOaaaU+jrj4tf4uKdIywVaaaFSRVT\n  domain: idmsa.apple.com\n  for_domain: true\n  path: "/"\n  secure: true\n  httponly: true\n  expires: 2016-04-27 23:55:56.000000000 Z\n  max_age: \n  created_at: 2016-03-28 16:55:57.032086000 -07:00\n  accessed_at: 2016-03-28 19:11:17.828141000 -07:00\n'


============================================================fastlane lane
desc "新创建一个app"
lane :create_app do
​    produce(
      username: 'test@qq.com',
      app_identifier: 'com.company.TestProject',
      app_name: '测试工程',
      language: 'Simplified Chinese',
      app_version: '1.0',
      sku: '123', # 注意，sku必须大于2个字符
      team_name: 'DNxxxx', # only necessary when in multiple teams
      #如果只在AppleDeveloper创建app，不在iTunesConnect创建app的话
      #skip_itc: true,

      # Optional
      # App services can be enabled during app creation
      enable_services: {
        # access_wifi: "on",             # Valid values: "on", "off"
        # app_group: "on",               # Valid values: "on", "off"
        # apple_pay: "on",               # Valid values: "on", "off"
        # associated_domains: "on",      # Valid values: "on", "off"
        # auto_fill_credential: "on",    # Valid values: "on", "off"
        # data_protection: "complete",   # Valid values: "complete", "unlessopen", "untilfirstauth",
        # game_center: "on",             # Valid values: "on", "off"
        # health_kit: "on",              # Valid values: "on", "off"
        # home_kit: "on",                # Valid values: "on", "off"
        # hotspot: "on",                 # Valid values: "on", "off"
        # icloud: "cloudkit",            # Valid values: "legacy", "cloudkit"
        # in_app_purchase: "on",         # Valid values: "on", "off"
        # inter_app_audio: "on",         # Valid values: "on", "off"
        # passbook: "on",                # Valid values: "on", "off"
        # multipath: "on",               # Valid values: "on", "off"
        # network_extension: "on",       # Valid values: "on", "off"
        # nfc_tag_reading: "on",         # Valid values: "on", "off"
        # personal_vpn: "on",            # Valid values: "on", "off"
        # passbook: "on",                # Valid values: "on", "off" (deprecated)
        # siri_kit: "on",                # Valid values: "on", "off"
        # vpn_configuration: "on",       # Valid values: "on", "off" (deprecated)
        # wallet: "on",                  # Valid values: "on", "off"
        # wireless_accessory: "on",      # Valid values: "on", "off"
        push_notification: "on",       # Valid values: "on", "off"
      }
  )
end

error do |lane, exception|
    #slack(
    #  message: exception.message,
    #  success: false
    #)
end

============================================================fastlane UI Testing使用snapshot与frameit进行自动截屏、加壳
snapshot是基于UI Testing(自动化测试)来实现的

新建一个UI Testing 的 target(如果项目中已经存在，这一步可以略过)
点击左上角的Scheme，选择New Scheme，选择新建的UITests
选择新建的Scheme，选择Edit Scheme，选择Build，勾选Shared和Run

如果你运行自动测试出现Pods库头文件找不到的错
前往PROJECT->Configurations的配置里将UITests在Debug和Release下改成Pod-xx.debug和Pod-xx.release(默认都为None)

https://docs.fastlane.tools/getting-started/ios/screenshots/

fastlane action snapshot
进入项目目录，输入以下命令，会在fastlane目录下生成两个文件:Snapfile和SnapshotHelper.swift
fastlane snapshot init

Open your Xcode project and make sure to do the following:
1) Add a new UI Test target to your project
2) Add the ./fastlane/SnapshotHelper.swift to your UI Test target
   You can move the file anywhere you want
3) Call `setupSnapshot(app)` when launching your app

  let app = XCUIApplication()
  setupSnapshot(app)
  app.launch()

4) Add `snapshot("0Launch")` to wherever you want to trigger screenshots // 在测试用例方法适当位置放入截图代码
5) Add a new Xcode scheme for the newly created UITest target
6) Add a Check to enable the `Shared` box of the newly created scheme

运行fastlane snapshot即可自动截图

Frameit:
使用frameit需要安装依赖库ImageMagick，官方推荐安装方式:
brew install libpng jpeg imagemagick

通过命令fastlane frameit setup或者fastlane frameit download_frames更新最近的设备外壳

简单使用:
# 默认为黑色外壳 支持颜色有white、silver、rose_gold、gold 
frame_screenshots(white: true) #外壳为白色

进阶使用:
如果你需要弄些背景和文字描述，那么你需要通过配置Framefile.json文件去定制化需求。
首先需要你在screenshots文件目录下创建Framefile.json，cd到screenshots目录输入touch Framefile.json

然后进入你的截图多语言zh-Hans目录下，新建title.strings和keyword.strings文件，这两个文件是放标题和关键字的。
这两个.strings文件一定要是UTF-8或者UTF-16 BE with BOM编码，或者直接由Xcode生成，第一行必须是空行

将背景图放在screenshots目录下，新建一个fonts文件夹，里面放你需要用到的字体文件,这里是官方的一个demo:
https://github.com/fastlane/examples/tree/master/MindNode/screenshots

Framefile.json文件：
{
  "default": {
    "keyword": {
      "fonts": [
        {
          "font": "./fonts/PingFang.ttc",
          "supported": ["en-US"]
        },
        {
          "font": "./fonts/PingFang.ttc",
          "supported": ["zh-Hans"]
        }
      ]
    },
    "title": {
      "fonts": [
        {
          "font": "./fonts/PingFang.ttc",
          "supported": ["en-US"]
        },
        {
          "font": "./fonts/PingFang.ttc",
          "supported": ["zh-Hans"]
        }
      ],
      "color": "#545454" // 标题颜色
    },
    // 自定义背景图片
    "background": "./background.jpg",
    // 图的内边距
    "padding": 60,
    // 是否完全显示手机框 false 为底部会被隐藏部分视图
    "show_complete_frame": false,
    // 关键字是否在标题上面 false表示关键字与标题在同一行
    "stack_title" : true,
    // 标题在屏幕下方还是上方 false 为上方
    "title_below_image": false,
    // 外壳颜色 优先级更高 (Valid values are BLACK,WHITE,GOLDandROSE_GOLD`)
    "frame": "GOLD"
  },


  "data": [
    {
      "filter": "1",  // 这是图片名
      "keyword": {
        "color": "#d21559"  // 关键字颜色
      }
    },
    {
      "filter": "2",
      "keyword": {
        "color": "#feb909"
      }
    },
    {
      "filter": "3",
      "keyword": {
        "color": "#aa4dbc"
      }
    },
    {
      "filter": "4",
      "keyword": {
        "color": "#31bb48"
      }
    }
  ]
}


title.strings文件：
"1" = "第一张图标题";
"2" = "第二张图标题";
"3" = "第三张图标题";
"4" = "第四张图标题";

keyword.strings文件：
"1" = "自动";
"2" = "打包";
"3" = "截图";
"4" = "证书";

在Fastfile文件里写个任务：
desc "给截图套壳"
lane :framePic do
  frameit(
    # 白色
    white: true,
    # 使用iPhone 5s替代iPhone SE框架
    use_legacy_iphone5s: true,
    # 使用iPhone 6s替代iPhone 7框架
    use_legacy_iphone6s: true,
    # 使用iPhone X 替代iPhone XS框架
    use_legacy_iphonex: true,
    # 截图所在路径
    path: "./fastlane/screenshots"
  )
end

运行fastlane framePic

snapshot:
Alias for the `capture_ios_screenshots` action
http://docs.fastlane.tools/actions/snapshot/#snapshot

frameit:
Alias for the `frame_screenshots`
https://docs.fastlane.tools/actions/frameit/

============================================================match
match:
Alias for the sync_code_signing action

Easily sync your certificates and profiles across your team

match是一种全新的证书和配置文件管理工具，它会把所有需要用到的证书传到git私有库上，
任何需要配置的机器直接用match同步证书。团队所有成员共享一份代码签名，以减免不必要的证书创建。

