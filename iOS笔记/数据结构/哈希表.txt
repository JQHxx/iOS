存取效率高
作为线性数据结构，哈希表无疑是查找速度比较快的一种

哈希表其实就是一个一维数组，而数组中的每一个元素都是一个单向链表而已。这样的数据结构解决了数组的增删元素的不足和链表的查询效率的不足
数组是存在连续的存储空间，而链表的存储空间不连续

哈希算法:
存储位置=f(关键字)
我们可以通过查找关键字不需要比较就可获得需要的记录的存储位置。这就是一种新的存储技术一一散列技术(哈希算法)
散列技术是在记录的存储位置和它的关键字之间建立一个确定的对应关系f，使得每个关键字key 对应一个存储位置f (key)

如果散列一段明文而且哪怕只更改该段落的一个字母，随后的哈希都将产生不同的值。
要找到散列为同一个值的两个不同的输入，在计算上是不可能的，所以数据的哈希值可以检验数据的完整性

哈希通过将单向数学函数（有时称为“哈希算法”）应用到任意数量的数据所得到的固定大小的结果。如果输入数据中有变化，则哈希也会发生变化
哈希可用于许多操作，包括身份验证和数字签名。也称为“消息摘要”

哈希表是根据设定的哈希函数H(key)将一组关键字映象到一个有限的地址区间上，并以关键字在地址区间中的象作为记录在表中的存储位置，这种表称为哈希表或散列，所得存储位置称为哈希地址或散列地址

哈希算法存取之所以快,是因为其 直接通过关键字key得到要存取的记录内存存储位置

存储位置=f(关键字)
散列技术是在记录的存储位置和它的关键字之间建立一个确定的对应关系
使得每个关键字key 对应一个存储位置f (key)
把这种对应关系f 称为散列函数， 又称为哈希(Hash) 函数
采用散列技术将记录存储在一块连续的存储空间中，这块连续存储空间称为散列表或哈希表(Hash table)。 那么关键字对应的记录存储位置我们称为散列地址
散列表是个一维数组，是连续的，而散列地址是不连续的

散列过程其实就是两步:
(1) 在存储时，通过散列函数计算记录的散列地址，并按此散列地址存储该记录。
(2) 当查找记录时，我们通过同样的散列函数计算记录的散列地址，按此散列地址访问该记录。
散列技术既是一种存储方法，也是一种查找方法.散列主要是面向查找的存储结构

我们时常会碰到两个关键字key1 != key2，但是却有f(key1) = f(key2)，这种现象我们称为哈希冲突,如果没有哈希冲突,散列表是一种非常高效的查找数据结构,其时间复杂度为O(1)


哈希算法会根据你要存入的数据,先通过该算法,计算出一个地址值,这个地址值就是你需要存入到集合当中的数据的位置,而不会像数组那样一个个的进行挨个存储,挨个遍历一遍后面有空位就存这种情况了,而你查找的时候,也是根据这个哈希算法来的,将你的要查找的数据进行计算,得出一个地址,这个地址会印射到集合当中的位置,这样就能够直接到这个位置上去找了,而不需要像数组那样,一个个遍历,一个个对比去寻找,这样自然增加了速度,提高了效率了


hash算法将你传入的key运算成一个地址值，类似指针那样，指向内存中的某块区域，存的时候根据该地址值，将value存到这个地址值映射的内存区域里，取得时候从key作hash运算后得出的地址值所对应的内存区域中取出结果
