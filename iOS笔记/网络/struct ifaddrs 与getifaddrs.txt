
struct ifaddrs
{
    struct ifaddrs  *ifa_next;    /* Next item in list */
    char            *ifa_name;    /* Name of interface */
    unsigned int     ifa_flags;   /* Flags from SIOCGIFFLAGS */
    struct sockaddr *ifa_addr;    /* Address of interface */
    struct sockaddr *ifa_netmask; /* Netmask of interface */
    union
    {
        struct sockaddr *ifu_broadaddr; /* Broadcast address of interface */
        struct sockaddr *ifu_dstaddr; /* Point-to-point destination address */
    } ifa_ifu;
    #define              ifa_broadaddr ifa_ifu.ifu_broadaddr
    #define              ifa_dstaddr   ifa_ifu.ifu_dstaddr
    void            *ifa_data;    /* Address-specific data */
};
Depending on whether the bit IFF_BROADCAST or IFF_POINTOPOINT is set in ifa_flags (only one can be set at a time), 
either ifa_broadaddr will contain the broadcast address associated with ifa_addr (if applicable for the address family) or ifa_dstaddr will contain the destination address of the point-to-point interface.

The ifa_data field points to a buffer containing address-family-specific data;this field may be NULL if there is no such data for this interface.


getifaddrs():
On success, getifaddrs() returns zero; on error, -1 is returned, and errno is set appropriately.
The data returned by getifaddrs() is dynamically allocated and should be freed using freeifaddrs() when no longer needed.

getaddrinfo 将主机和服务转换到socket地址

它以一个套接口地址为参数，返回一个描述主机的字符串和一个描述服务的字符串。
#include <netdb.h>
int getnameinfo(const struct sockaddr *sockaddr, socklen_t addrlen, char *host, size_t hostlen, char *serv, size_t servlen, int flags);
getnameinfo 功能与getaddrinfo相反，它将socket地址转换到主机和服务
成功返回0,出错返回-1
sockaddr指向包含协议地址的套接口地址结构，它将会被转换成可读的字符串，addrlen是结构的长度
host和hostlen指定主机字符串，serv和servlen指定服务字符串。如果调用 者不想返回主机字符串，将hostlen设为0即可。同样servlen设为0就指定不返回服务的信息。为了给这两个字符串分配空间，<netdb.h>中定义了两个常值
NI_MAXHOST:返回的主机字符串的最大长度
NI_MAXSERV:返回的服务字符串的最大长度

=================================
flag1:0000 0001
flag2:0000 0010
flag3:0000 0100

flags: flag1 | flag2 = 0000 0011

flags & flag1 = 0000 0001(flag1)
flags &= flag1  // flags = flag1

flags & ~flag1 = 0000 0011 & 1111 1110 = 0000 0010 (flag2) 
flags &= ~flag1 // flags = flag2 ###相当于移除flag1的标记###

=================================
eth0 eth0:1 和eth0.1三者的关系对应于物理网卡、子网卡、虚拟VLAN网卡


=================================
手机的MAC地址，也就是手机的物理网卡地址

=================================
对于10.1.1.0 （255.255.255.0 ）网段，其广播地址为10.1.1.255 （255 即为2进制的11111111 ）
当发出一个目的地址为10.1.1.255 的分组（封包）时，它将被分发给该网段上的所有计算机。

=================================
绝大多数主流品牌路由器默认管理登录地址为：http://192.168.1.1 /或者 http://192.168.0.1/