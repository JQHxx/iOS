http://www.softwhy.com/article-8499-1.html

git rev-parse --short HEAD // commit eg: 2219f7a
git rev-parse --abbrev-ref HEAD// branch eg: master

显示版本库 .git 目录所在的位置
git rev-parse --git-dir

显示工作区根目录
git rev-parse --show-toplevel

git config --global user.name "My Name"
git config --global user.email "myEmail@example.com"

git remote add origin git@example.com:namespace/projectname.git

git clone http://192.168.10.120/hanrovey/XXX.git

git push origin --delete hanrovey (删除远程某个分支)


git log --oneline
2219f7a (HEAD -> master, origin/master, origin/HEAD) Initial commit
HEAD 它指向当前所在的分支,master
master指向2219f7a

git checkout Develop// 切换分支

===========================git merge与 git rebase区别
在分支合并时，有两种方式：git merge 和git rebase
git merge b # 将b分支合并到当前分支
你可以用"pull"命令把"origin"分支上的修改拉下来并且和你的修改合并； 结果看起来就像一个新的"合并的提交"(merge commit)

git rebase b # 把b分支合并到当前分支
如果你想让"mywork"分支历史看起来像没有经过任何合并一样，你也许可以用 git rebase
$ git checkout mywork
$ git rebase origin
这些命令会把你的"mywork"分支里的每个提交(commit)取消掉，并且把它们临时 保存为补丁(patch)(这些补丁放到".git/rebase"目录中),然后把"mywork"分支更新 为最新的"origin"分支，最后把保存的这些补丁应用到"mywork"分支上