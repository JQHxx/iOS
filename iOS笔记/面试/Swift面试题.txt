1.
class Address {
  var fullAddress: String
  var city: String

  init(fullAddress: String, city: String) {
    self.fullAddress = fullAddress
    self.city = city
  }
}

class Person {
  var name: String
  var address: Address

  init(name: String, address: Address) {
    self.name = name
    self.address = address
  }
}

var headquarters = Address(fullAddress: "123 Tutorial Street", city: "Appletown")
var ray = Person(name: "Ray", address: headquarters)
var brian = Person(name: "Brian", address: headquarters)
假如Brian要搬迁到新的地址居住，所以你会这样更新他的住址：
brian.address.fullAddress = "148 Tutorial Street"
这样做的话会发生什么？错在哪个地方？

Ray也会更新地址。
因为类Address是引用类型，headquarters是同一个实例，不论你是修改ray的地址还是brian的地址，都会改变headquarters地址。
解决方法是为brian新创建一个地址。或者声明Address为结构体而不是类

2.
struct Tutorial {
  var difficulty: Int = 1
}

var tutorial1 = Tutorial()
var tutorial2 = tutorial1
tutorial2.difficulty = 2
tutorial1.difficulty和tutorial2.difficulty的值有什么不同，如果Tutorial是一个类，又有什么不同？为什么？
答案：
tutorial1.difficulty的值是1，而tutorial2.difficulty的值是2
在Swift中，结构体是值类型而不是引用类型，它是值copy。
下面这行代码会首先创建一份tutorial1的copy，然后再赋值给tutorial2
var tutorial2 = tutorial1
从这行代码可以看出，tutorial2 的变化不会影响tutorial1
如果Tutorial是一个类，tutorial1.difficulty和tutorial2.difficulty的值都是2。
在Swift中，类是引用类型，tutorial1的变化会影响到tutorial2，反之亦然。

3.
let animals = ["fish", "cat", "chicken", "dog"]
let sortedAnimals = animals.sort { (one: String, two: String) -> Bool in
  return one < two
}

闭包的参数，因为在闭包中，系统是可以通过类型推断方式推算出参数的类型。
所以你可以去掉参数的类型：
let sortedAnimals = animals.sort { (one, two) -> Bool in return one < two }
返回类型也可以推算出来，所以可以去掉闭包的返回类型：
let sortedAnimals = animals.sort { (one, two) in return one < two }
可以用$i符号替换掉参数的名字，代码然后就变成这样：
let sortedAnimals = animals.sort { return $0 < $1 }
在单语句的闭包中，关键字return也可以省略。最后一条语句的返回值就变成闭包的返回值：
let sortedAnimals = animals.sort { $0 < $1 }

对字符串来说，有一个字符串比较函数，定义如下：
func <(lhs: String, rhs: String) -> Bool
使用这个函数可以让你的Code更加简洁, 如下：
let sortedAnimals = animals.sort(<)

4.
var optional1: String? = nil
var optional2: String? = .None
nil和.None有什么不同？变量optional1和optional2有什么不同？
答案:
nil和.None是一样的。
当可选变量没有值时，Optional.None（.None for short）是一般初始化可选变量的方式，而nil则是另一种写法。
事实上，下面条件语句输出是true：
nil == .None 

5.
下面的代码打印输出是什么？为什么？
var thing = "cars"
let closure = { [thing] in
  print("I love \(thing)")
}
thing = "airplanes"
closure()
答案：
结果会打印出“I love cars”。当声明闭包的时候，捕获列表会创建一份thing的copy，所以被捕获到的值是不会改变的，即使你改变thing的值。
如果你去掉闭包中的捕获列表，编译器会使用引用代替copy。在这种情况下，当闭包被调用时，变量的值是可以改变的。示例如下：
var thing = "cars"
let closure = {    
  print("I love \(thing)")
}
thing = "airplanes"
closure() // Prints "I love airplanes"

6.
闭包是引用类型