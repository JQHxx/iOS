交互器（Interactor） — 包括关于数据和网络请求的业务逻辑，例如创建一个实体（Entities），或者从服务器中获取一些数据。为了实现这些功能，需要使用服务、管理器，但是他们并不被认为是VIPER架构内的模块，而是外部依赖。
展示器（Presenter） — 包含UI层面的业务逻辑以及交互器层面的方法调用，用户输入做出反应（通过Interator使用的基本模型对象）。
实体（Entities） — 普通的数据对象，不属于数据访问层，因为数据访问属于交互器（Interactor）的职责。
视图（View）-显示Presenter告知的内容，并将用户输入中继回Presenter。
路由器（Router） — 用来连接VIPER的各个模块。

- View
提供完整的视图，负责视图的组合、布局、更新
向Presenter提供更新视图的接口
将View相关的事件发送给Presenter

- Presenter
接收并处理来自View的事件
向Interactor请求调用业务逻辑
向Interactor提供View中的数据
接收并处理来自Interactor的数据回调事件
通知View进行更新操作
通过Router跳转到其他View

- Router
提供View之间的跳转功能，减少了模块间的耦合
初始化VIPER的各个模块

- Interactor
维护主要的业务逻辑功能，向Presenter提供现有的业务用例
维护、获取、更新Entity
当有业务相关的事件发生时，处理事件，并通知Presenter

- Entity
和Model一样的数据模型

VIPER 是第一个通过路由器（Router）实现明确的地址导航的模式

The main parts of VIPER are:
View: displays what it is told to by the Presenter and relays user input back to the Presenter.
Interactor: contains the business logic as specified by a use case.
Presenter: contains view logic for preparing content for display (as received from the Interactor) and for reacting to user inputs (by requesting new data from the Interactor).
Entity: contains basic model objects used by the Interactor.
Routing: contains navigation logic for describing which screens are shown in which order.

Application Design Based on Use Cases: 
基于用例的应用程序设计
Interactor:
An Interactor represents a single use case in the app.
It contains the business logic to manipulate model objects (Entities) to carry out a specific task. 
The work done in an Interactor should be independent of any UI. The same Interactor could be used in an iOS app or an OS X app.

Common
-----Store
@class VTDManagedTodoItem;
@interface VTDCoreDataStore : NSObject
@end

Module_List
-----Application Logic
    -----Interactor
@protocol VTDListInteractorInput <NSObject>
- (void)findUpcomingItems;
@end

@protocol VTDListInteractorOutput <NSObject>
- (void)foundUpcomingItems:(NSArray *)upcomingItems;
@end

#import "VTDListInteractorIO.h"
@class      VTDListDataManager;
@protocol   VTDClock;
@interface VTDListInteractor : NSObject <VTDListInteractorInput>
@property (nonatomic, weak) id<VTDListInteractorOutput> output;
- (instancetype)initWithDataManager:(VTDListDataManager *)dataManager clock:(id<VTDClock>)clock;
@end
@interface VTDListInteractor()
@property (nonatomic, strong)   VTDListDataManager *dataManager;
@property (nonatomic, strong)   id<VTDClock>        clock;
@end
    -----Manager
@class VTDCoreDataStore;
@class VTDTodoItem;
@interface VTDListDataManager : NSObject
@property (nonatomic, strong) VTDCoreDataStore *dataStore;
- (void)todoItemsBetweenStartDate:(NSDate *)startDate endDate:(NSDate *)endDate completionBlock:(void (^)(NSArray *todoItems))completionBlock;
@end


[NSPredicate predicateWithFormat:@"(date >= %@) AND (date <= %@)", startDate, endDate];

==================================================

搭建VIPER架构的工具:
https://github.com/strongself/Generamba

2.1 模板
viper模板的生成依赖于Generamba ，安装配置参考
https://github.com/rambler-digital-solutions/Generamba

模板配置地址
### Templates
catalogs:
- "https://git***.***.com/iOS/bviper.git"
templates:
- {name: bviper}