https://guides.cocoapods.org/

ocoaPods在Cocoa开发日常工作中经常用到的包管理器，即依赖管理工具
CocoaPods的编译和运行需要Ruby环境的支持
Podfile是一个用来描述xcode项目的依赖的说明书或者规格

use_frameworks!则表明依赖的库编译生成.frameworkds的包，而不是.a的包
platform指定的版本是仓库兼容的最小版本
target指定的是作用于工程中的哪个目标

source 'https://github.com/CocoaPods/Specs.git'
platform :ios, "8.0"
use_frameworks!

target 'Test' do
	pod 'AFNetworking', '~>2.6'
    pod 'NIMKit'
end

pod 'xxxx' : 后方没有指定版本，则表示使用仓库的最新版本。
pod 'xxxx', '2.3' : 使用xxxx仓库的2.3版本。
pod 'xxxx', '~>2.3': 则表示使用的版本范围是 2.3 <= 版本 < 3.0。如果后方指定版本是~>2.3.1, 那么则表示使用的版本范围是 2.3.1 <= 版本 < 2.4.0。
pod 'xxxx', '>2.3': 使用大于2.3的版本。
pod 'xxxx', '>=2.3': 使用2.3及以上的版本。
pod 'xxxx', '<2.3': 使用小于2.3的版本。
pod 'xxxx', '<=2.3': 使用小于等于2.3的版本。

除了版本指定方式，我们还可以通过指定相关代码仓库的路径来指定相关的依赖，比如使用path来指定本地的相关仓库，使用git来指定远端的git仓库
指定为本地的源文件:
pod 'xxx', :path => '本地代码仓库的路径/xxx.podspec'
pod 'xxx', :path => '../../codebase-ios-sdk/'  # MHP Demo

pod 'xxx', :git => 'git仓库地址' # 可以通过git仓库地址来加载相关依赖
pod 'FLEX', :git => 'git@gitlab.com:porsche-digital-china/ios/codebase/flex.git', :branch => 'master',  :confiDegurations => ['bug']

:tag => 'X.X.X'  # 指定相关的tag号

podfile.lock是用来锁版本的，为了避免版本不一致的情况发生:
当在 podfile 中添加了相关依赖仓库，但是没有添加相关的依赖仓库的版本，那么在每次 pod insall 时都会安装该仓库最新的版本。
当一个工程有多个人开发时，A同学 在 B同学 之前进行的pod install, 而在A同学安装后一些仓库进行了更新，那么在 B同学 安装仓库时就会寻找这个最新的版本。
那么这种情况下就会出现同一个工程中所依赖的仓库版本不一致的问题。为了解决这个版本不一致的问题，于是乎就引入了Podfile.lock这个所版本用的文件

在首次 pod install 后，会生成一个 podfile.lock 文件，该文件中会记录此次 install 所安装的版本。
当再次进行 pod install时，对那些没有指定版本的依赖仓库会使用podfile.lock 文件中记录的版本。
如果在 podfile 中指定了相关版本，那么就直接引用 podfile 中指定的版本然后在更新 podfile.lock中记录的版本即可

将podfile中的AFNetworking的版本号给删掉，然后再次进行pod install。
此刻并不会安装最新的AF版本，因为在podfile.lock中已经记录下了当前使用的AF版本了(2.6.3版本)，所以再次进行 pod install 时仍然会加载 podfile.lock中记录的版本

你可以使用pod update命令来进行更新，使podfile.lock中记录的版本进行更新。
也可以在podfile文件中指定相关依赖仓库的版本，eg:pod 'AFNetworking', '~>2.6',然后再执行pod install来更新相关的版本



install！:
标注了pod在整个安装期间安装的方法和选择
当前安装所用的方法就只有一个：’cocoapods’，所以第一个参数就只能用’cocoapods’

pod 'PonyDebugger', :configurations => ['Debug', 'Beta’]
pod 'PonyDebugger', :configuration => ‘Debug’

pod 'PonyDebugger', :source => '[https://github.com/CocoaPods/Specs.git](https://github.com/CocoaPods/Specs.git)’

子模块:
当通过名称安装pod的时候，将会安装在podspec中配置好的所有的子模块。
如果只想安装特定模块,pod 'QueryKit/Attribute'
如果想要安装好几个特定的模块，可以指定一个list
pod 'QueryKit', :subspecs => ['Attribute', 'QuerySet’]

可以从外部引入podspec:
pod 'JSONKit', :podspec => '[https://example.com/JSONKit.podspec](https://example.com/JSONKit.podspec)’

inhibit_all_warnings（阻止所有警告）

生成Xcode工程或者其他你要做的操作前做最后改变:
post_install do |installer|

===================================================
xcode cocoapod插件：
install pods：
添加，移除，更新库到某个版本
每次运行pod install命令的时候，在下载、安装新的库的同时，也会把你安装的每个库的版本都写在了Podfile.lock文件里面
这个文件记录你每个安装库的版本号，并且锁定了这些版本

对于在Podfile.lock里面所列出的那些库，会下载在Podfile.lock里面明确的版本，并不会去检查是否该库有新的版本
对于还不在Podfile.lock里面的库，会找到Podfile里面描述对应版本（例如：pod "MyPod", "~>1.2"）。

update pods：
更新Podfile文件里面的所有库到最新的版本
不需要考虑Podfile.lock里面的限制
pod 'AFNetworking', '~>3.0.4'指定了版本 即使有3.1.0也不会更新

更新指定的第三方库：
pod update 库名

检查某个库的新版本：
pod outdated


pod install --verbose --no-repo-update
pod update 库名 --verbose --no-repo-update



