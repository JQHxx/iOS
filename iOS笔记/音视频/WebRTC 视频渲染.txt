在iOS中有两种加速渲染视频的方法。一种是使用OpenGL；另一种是使用 Metal。

创建 OpenGL 上下文：
在iOS中使用OpenGL ES做视频渲染时，首先要创建EAGLContext对象。
这是因为，EAGLContext管理着 OpengGL ES 渲染上下文。
该上下文中，包括了状态信息，渲染命令以及OpenGL ES绘制资源（如纹理和renderbuffers）。为了执行OpenGL ES命令，你需要将创建的EAGLContext设置为当前渲染上下文。

EAGLContext并不直接管理绘制资源，它通过与上下文相关的EAGLSharegroup对象来管理。当创建EAGLContext时，你可以选择创建一个新的sharegroup或与之前创建的EAGLContext共享EAGLSharegroup。

WebRTC中并没有使用共享EAGLSharegroup的情况

目前，OpenGL ES有3个版本，主要使用版本2和版本3 。所以我们在创建时要对其作判断。首先看是否支持版本3，如果不支持我们就使用版本2。
//首先使用版本3,如果不支持则使用版本2
EAGLContext *glContext =
[[EAGLContext alloc] initWithAPI:kEAGLRenderingAPIOpenGLES3];
if (!glContext) {
    glContext = [[EAGLContext alloc] initWithAPI:kEAGLRenderingAPIOpenGLES2];
}

if (!glContext) {
    RTCLogError(@"Failed to create EAGLContext");
    return NO;
}

创建完上下文后，我们还要将它设置为当前上下文，这样它才能真正起作用。
//如果当前上下文不是OpenGL上下文，则将OpenGL上下文设置为当前上下文。
if ([EAGLContext currentContext] != _glContext) {
    [EAGLContext setCurrentContext:_glContext];
}
需要注意的是，由于应用切换到后台后，上下文就发生了切换。所以当它切换到前台时，也要做上面那个判断。

创建 OpenGL View：
在iOS中，有两种展示层，一种是 GLKView，另一种是 CAEAGLLayer。WebRTC中使用GLKView进行展示。

GLKit框架提供了View和View Controller类以减少建立和维护绘制 OpenGL ES 内容的代码。GLKView类用于管理展示部分；GLKViewController类用于管理绘制的内容。
它们都是继承自UIKit。GLKView的好处是，开发人员可以将自己的精力聚焦在OpenGL ES渲染的工作上。

绘制 OpenGL ES 内容有三步：
准备 OpenGL ES 环境；
发送绘制命令；
展示渲染内容。

GLKView类自己实现了第一步和第三步。第二步由开发人员来完成，也就是要实现drawRect函数。GLKView之所以能为OpenGL ES提供简单的绘制接口，是因为它管理了OpenGL ES渲染过程的标准部分：

在调用绘制方法之前：
使用 EAGLContext 作为当前上下文。
根据size, 缩放因子和绘制属性，创建 FBO 和 renderbuffer。
绑定 FBO，作为绘制命令的当前目的地。
匹配 OpenGL ES viewport与 framebuffer size 。
在绘制方法返回之后：
解决多采样 buffers(如果开启了多采样)。
当内容不在需要时，丢掉 renderbuffers。
展示renderbuffer内容。

使用GLKView有两种方法，一种是实现一个类，直接继承自GLKView，并实现drawRect方法。另一种是实现GLKView的代理，也就是GLKViewDelegate，并实现drawInRect方法。

在WebRTC中，使用的是第二种方法。RTCEAGLVideoView 是GLKView的包裹类，并且继承自GLKViewDelegate。

创建GLKView.
// GLKView manages a framebuffer for us.
//创建GLKView，在创建时，就将 EAGLContext 设置好。
_glkView = [[GLKView alloc] initWithFrame:CGRectZero
                                context:_glContext];
_glkView.drawableColorFormat = GLKViewDrawableColorFormatRGBA8888;
_glkView.drawableDepthFormat = GLKViewDrawableDepthFormatNone;
_glkView.drawableStencilFormat = GLKViewDrawableStencilFormatNone;
_glkView.drawableMultisample = GLKViewDrawableMultisampleNone;

//设置GLKView的delegate
_glkView.delegate = self;

_glkView.layer.masksToBounds = YES;

//将该值设置为NO,这样我们就可以自己控制OpenGL的展示了
_glkView.enableSetNeedsDisplay = NO;

[self addSubview:_glkView];

实现drawInRect方法：
if (!_nv12TextureCache) {
  _nv12TextureCache = [[RTCNV12TextureCache alloc] initWithContext:_glContext];
}
if (_nv12TextureCache) {
  [_nv12TextureCache uploadFrameToTextures:frame];
  [_shader applyShadingForFrameWithWidth:frame.width
                                  height:frame.height
                                rotation:frame.rotation
                                  yPlane:_nv12TextureCache.yTexture
                                 uvPlane:_nv12TextureCache.uvTexture];
  [_nv12TextureCache releaseTextures];
}

上面的代码就是通过Shader来绘制NV12的YUV数据到View中。这段代码的基本意思是将一个解码后的视频帧分解成Y数据纹理，UV数据纹理。然后调用Shader程序将纹理转成rgb数据，最终渲染到View中。

Shader程序：
OpenGL ES 有两种 Shader。一种是顶点(Vetex)Shader; 另一种是片元(fragment )Shader。
Vetex Shader: 用于绘制顶点。
Fragment Shader:用于绘制像素点。

Vetex Shader：
Vetex Shader用于绘制图形的顶点。我们都知道，无论是2D还是3D图形，它们都是由顶点构成的。
在OpenGL ES中，有三种基本图元，分别是点，线，三角形。由它们再构成更复杂的图形。而点、线、三角形又都是由点组成的。

视频是在一个矩形里显示，所以我们要通过基本图元构建一个矩形。
理论上，距形可以通过点、线绘制出来，但这样做的话，OpenGL ES就要绘制四次。而通过三角形绘制只需要两次，所以使用三角形执行速度更快。

下面的代码就是 WebRTC 中的Vetex Shader程序。该程序的作用是每个顶点执行一次，将用户输入的顶点输出到 gl_Position中，并将顶点的纹理作标点转作为 Fragment Shader 的输入。
1.OpenGL坐标原点是屏幕的中心。纹理坐标的原点是左下角。
2.gl_Position是Shader的内部变量，存放一个项点的坐标。
// Vertex shader doesn't do anything except pass coordinates through.
const char kRTCVertexShaderSource[] =
  SHADER_VERSION
  VERTEX_SHADER_IN " vec2 position;\n"
  VERTEX_SHADER_IN " vec2 texcoord;\n"
  VERTEX_SHADER_OUT " vec2 v_texcoord;\n"
  "void main() {\n"
  "    gl_Position = vec4(position.x, position.y, 0.0, 1.0);\n"
  "    v_texcoord = texcoord;\n"
  "}\n";

fragment Shader：
fragment Shader程序是对片元着色，每个片元执行一次。片元与像素差不多。可以简单的把片元理解为像素。
