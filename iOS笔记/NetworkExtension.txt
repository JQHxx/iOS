libsodium
跨平台的加密库:用于加密、解密、签名和生成密码哈希等等

=================================VPN
virtual private network (VPN)

###Packet Tunnel Provider###
继承关系
NEPacketTunnelProvider : NETunnelProvider : NEProvider

Implement a VPN client for a packet-oriented, custom VPN protocol.

When the system starts a VPN configuration that uses your packet tunnel provider, 
it launches your app extension, instantiates your packet tunnel provider subclass within that app extension,
and starts forwarding packets to your provider. 
Your provider is expected to open a tunnel to a VPN server and send those packets over that tunnel. 
Similarly, if your provider receives packets from the tunnel, it should pass them back to the system.

Packet tunnel providers can run in destination IP mode or source-application mode
The latter is one form of per-app VPN (the other form is an App Proxy Provider)

NETunnelProvider:
An abstract base class shared by NEPacketTunnelProvider and NEAppProxyProvider.
NEProvider:
An abstract base class for all NetworkExtension providers.

NEPacketTunnelNetworkSettings:
The configuration for a packet tunnel provider’s virtual interface.
NETunnelNetworkSettings:
The configuration for a tunnel provider’s virtual interface.

----------Packet Handling:
NEPacketTunnelFlow
An object for reading and writing packets to and from the tunnel’s virtual interface.
NEPacket
A network packet and its associated properties.

----------VPN Configuration:
###NETunnelProviderManager:###
An object to create and manage the tunnel provider’s VPN configuration.
Like its superclass NEVPNManager, you use the NETunnelProviderManager class to configure and control VPN connections. 
The difference is that NETunnelProviderManager is used to to configure and control VPN connections that use a custom VPN protocol.
The client side of the custom protocol implementation is implemented as a Packet Tunnel Provider extension
The Packet Tunnel Provider extension’s containing app uses NETunnelProviderManager to create and manage VPN configurations that use the custom protocol, 
and to control the VPN connections specified by the configurations.
The NETunnelProviderManager class inherits most of its functionality from the NEVPNManager class. 
The key differences to be aware of when using NETunnelProviderManager are:
1.The protocolConfiguration property can only be set to instances of the NETunnelProviderProtocol class
2.The connection read-only property is set to an instance of the NETunnelProviderSession class.

Each NETunnelProviderManager instance corresponds to a single VPN configuration stored in the Network Extension preferences. 
Multiple VPN configurations can be created and managed by creating multiple NETunnelProviderManager instances.
Each VPN configuration is associated with the app that created it. 
The app’s view of the Network Extension preferences is limited to include only the configurations that were created by the app.

VPN configurations created using NETunnelProviderManager are classified as regular enterprise VPN configurations 
(as opposed to the Personal VPN configurations created by NEVPNManager)
Only one enterprise VPN configuration can be enabled on the system at a time
If both a Personal VPN and an enterprise VPN are active on the system simultaneously, 
the enterprise VPN takes precedence, meaning that if the routes for the two VPNs conflict then the routes for the enterprise VPN will take precedence
The Personal VPN will remain active and connected while the enterprise VPN is active and connected, 
and any traffic that is routed to the Personal VPN and is not routed to the enterprise VPN will continue to traverse the Personal VPN.

Important:
The app and Packet Tunnel Provider extension must not write to the com.apple.managed.vpn.shared keychain access group. 
When writing to the keychain, the app and Packet Tunnel Provider must target a different keychain access group.

Routing Network Data to the VPN:
There are two ways or methods by which network data is routed to the VPN:
By destination IP address
By source application (Per-App VPN)

Routing by Destination IP:
This is the default routing method. 
The IP routes are specified by the Packet Tunnel Provider extension at the time that the VPN tunnel is fully established. 
See NETunnelProvider for more details.

Per-App VPN:
The only way to configure Per-App VPN is by enrolling the device in a Mobile Device Management (MDM) system, 
and then linking apps that are managed by the MDM system with a VPN configuration created from a com.apple.vpn.managed.applayer configuration profile payload. 
Here are some details about how this works:
1.The MDM server creates a configuration profile containing a com.apple.vpn.managed.applayer payload. 
The com.apple.vpn.managed.applayer payload contains all of the usual VPN configuration profile payload fields, 
and also must contain a VPNUUID field, containing a unique string defined by the MDM server.
2.If the VPN provider extension is a Packet Tunnel Provider extension, 
then the ProviderType field in the com.apple.vpn.managed.applayer payload should be set to packet-tunnel. 
If the VPN provider extension is an App Proxy Provider extension, 
then the ProviderType field in the com.apple.vpn.managed.applayer should be set to app-proxy.
3.The MDM server adds a VPNUUID key to the attributes dictionary of all of the managed apps that will use the VPN. 
The value of the VPNUUID key must be set to the same unique string contained in the VPNUUID field in the com.apple.vpn.managed.applayer payload.
4.The MDM server pushes the configuration profile and the managed apps to the iOS device using the MDM protocol.

The MDM client running on the device creates one app rule in the VPN configuration for each managed app that is linked to the VPN configuration via the VPNUUID app attribute.

Note:
It is not possible to create app rules for Apple system apps. 
The one exception to this rule is Safari. 
In the case of Safari, the VPN can only tunnel the network traffic for web sites in certain domains, not all web sites
See the SafariDomains field in Configuration Profile Reference
https://developer.apple.com/business/documentation/Configuration-Profile-Reference.pdf

Per-App VPN On Demand:
The Per-App VPN app rules serve as both routing rules and VPN On Demand rules. 
This is in contrast to IP destination-based routing, 
where the VPN On Demand rules are configured separately from the routing rules. 
When the onDemandEnabled property is set to YES and an app that matches the Per-App VPN rules attempts to communicate over the network, 
the VPN will be started automatically.

It is possible to set regular VPN On Demand rules in a Per-App VPN configuration via the onDemandRules property, 
but only NEOnDemandRuleDisconnect rules will be used. 
When a NEOnDemandRuleDisconnect rule matches, 
apps which match the Per-App VPN rules will bypass the VPN.

Testing Per-App VPN:
As described above, an MDM server is required to configure Per-App VPN for VPN apps distributed via the App Store. 
To make testing Per-App VPN easier, 
it is possible to configure Per-App VPN without an MDM server during development by using the NETestAppMapping Info.plist key.

Important:
The NETestAppMapping Info.plist key can only be used to create app rules in apps that are signed with a Development provisioning profile. 
In apps that are signed with Distribution provisioning profiles the NETestAppMapping Info.plist key has no effect.

Here is what you need to do to make use of this capability:
1.Create a configuration profile containing a com.apple.vpn.managed.applayer payload as described in Configuration Profile Reference. 
In addition to all of the usual VPN configuration payload fields, 
the payload must also contain a VPNUUID field, containing a unique string defined by you.
2.Add the NETestAppMapping key to your app’s Info.plist. 
The value of this key should be a dictionary that maps VPNUUID values to arrays of app bundle identifiers. 
Here is a sample:
<key>NETestAppMapping</key
<dict>
    <key>3D7A07D8-97D0-4E5A-BB04-1EB82DD12A35</key>
    <array>
        <string>my.greatenterprise.SuperApp</string>
    </array>
<dict>
3.Rebuild the app.
4.Install the app and the configuration profile on the device.

The system will create one app rule in the VPN configuration for each bundle identifier listed in the array in the NETestAppMapping dictionary corresponding to the value of the VPNUUID field in the com.apple.vpn.managed.applayer payload.

Per-App VPN Payload:


===Managing Tunnel Configurations===
+ loadAllFromPreferencesWithCompletionHandler:
Read all of the VPN configurations created by the calling app that have previously been saved to the Network Extension preferences.
- copyAppRules
Create a copy of the app rules currently set in the configuration.

NETunnelProviderManager : NEVPNManager

NEAppProxyProviderManager : NETunnelProviderManager 

###NEVPNManager###
An object to create and manage a Personal VPN configuration.

The NEVPNManager API gives apps the ability to create and manage a Personal VPN configuration on iOS and macOS. 
Personal VPN configurations are typically used to provide a service to users that protects their Internet browsing activity on insecure networks such as public Wi-Fi networks.

###NETunnelProviderProtocol : NEVPNProtocol###
Configuration parameters for a VPN tunnel.
NETunnelProviderProtocol objects are used to specify configuration parameters for Tunnel Provider extensions.

===========================NETunnelProvider
###App Proxy Provider###
Implement a VPN client for a flow-oriented, custom VPN protocol.

A virtual private network (VPN) is a form of network tunnel where a VPN client uses the public Internet to create a connection to a VPN server and then passes private network traffic over that connection.
If you want to build a VPN client that implements a flow-oriented, 
custom VPN protocol—one that works with the data passing through a TCP connection rather than the packets used to transport that data—create an app proxy provider app extension.

When the system starts a VPN configuration that uses your app proxy provider, 
it launches your app extension, instantiates your app proxy provider subclass within that app extension, 
and starts forwarding flows to your provider.
Each flow represents either a TCP connection or a conversation over UDP. 
Your provider is expected to open a tunnel to a VPN server and forward each flow over that tunnel. 
Similarly, if your provider receives flow data from the tunnel, it should pass that back to the system via the appropriate flow.

App proxy providers are one form of per-app VPN, 
the other being a Packet Tunnel Provider in source application mode.

App proxy providers are supported in iOS on managed devices only, and in macOS for Mac App Store apps only.

###NEPacketTunnelProvider###
The principal class for a packet tunnel provider app extension.

The NEPacketTunnelProvider class gives its subclasses access to a virtual network interface via the packetFlow property.
Use the setTunnelNetworkSettings:completionHandler: method in the Packet Tunnel Provider to specify that the following network settings be associated with the virtual interface:
Virtual IP address
DNS resolver configuration
HTTP proxy configuration
IP destination networks to be routed through the tunnel
IP destination networks to be routed outside the tunnel
Interface MTU

By specifying IP destination networks, the Packet Tunnel Provider can dictate what IP destinations will be routed to the virtual interface. 
IP packets with matching destination addresses will then be diverted to Packet Tunnel Provider and can be read using the packetFlow property.
The Packet Tunnel Provider can then encapsulate the IP packets per a custom tunneling protocol and send them to a tunnel server. 
When the Packet Tunnel Provider decapsulates IP packets received from the tunnel server, 
it can use the packetFlow property to inject the packets into the networking stack.

Important:
The com.apple.developer.networking.networkextension entitlement is required in order to use the NEPacketTunnelProvider class. 
Enable this entitlement when creating an App ID in your developer account.

Creating a Packet Tunnel Provider Extension:
Packet Tunnel Providers run as App Extensions for the com.apple.networkextension.packet-tunnel extension point.
To create a Packet Tunnel Provider extension, first create a new App Extension target in your project.

For an example of an Xcode build target for this app extension, 
see the SimpleTunnel: Customized Networking Using the NetworkExtension Framework sample code project.
https://developer.apple.com/library/archive/samplecode/SimpleTunnel/Introduction/Intro.html#//apple_ref/doc/uid/TP40016140

Once you have a Packet Tunnel Provider extension target, create a subclass of NEPacketTunnelProvider. 
Then, set the NSExtensionPrincipalClass key in the the extension’s Info.plist to the name of your subclass.
If it is not already, set the NSExtensionPointIdentifier key in the extension’s Info.plist to com.apple.networkextension.packet-tunnel.

Here is an example of the NSExtension dictionary in a Packet Tunnel Provider extension’s Info.plist:
<key>NSExtension</key>
<dict>
    <key>NSExtensionPointIdentifier</key>
    <string>com.apple.networkextension.packet-tunnel</string>
    <key>NSExtensionPrincipalClass</key>
    <string>MyCustomPacketTunnelProvider</string>
</dict>
Finally, add the Packet Tunnel Provider extension target to your app’s Embed App Extensions build phase.

Subclassing Notes:
In order to create a Packet Tunnel Provider extension, you must create a subclass of NEPacketTunnelProvider and override the methods listed below.
Methods to Override:
startTunnelWithOptions:completionHandler:
stopTunnelWithReason:completionHandler:

=====VPN On Demand Rules=====
Set up VPN On Demand.

VPN On Demand allows the system to automatically start or stop a VPN connection based on various criteria.
For example, you can use VPN On Demand to configure an iPhone to start a VPN connection when it’s on Wi-Fi and stop the connection when it’s on cellular.
Or, you can start the VPN connection when an app tries to connect to a specific service that’s only available via VPN.


=====Personal VPN=====
Create and manage a VPN configuration that uses one of the built-in VPN protocols (IPsec or IKEv2).

With the Personal VPN feature in macOS and iOS, your app can create and manage a VPN configuration that uses one of the built-in VPN protocols (IPsec or IKEv2). 
The user must explicitly authorize your app the first time it saves a VPN configuration.

Note:
Personal VPN only supports recommended VPN protocols; 
it doesn’t support legacy VPN protocols, like PPTP and L2TP.

Before starting with Personal VPN, verify that the client is compatible with your VPN server. 
Use Apple Configurator to create a configuration profile with a VPN payload for your server.
If you can connect using the VPN configuration from your configuration profile, you should be able to connect using Personal VPN.

To get started, call the sharedManager class method to access the NEVPNManager singleton. 
Then load the VPN configuration by calling loadFromPreferencesWithCompletionHandler:; 
if you haven’t previously saved a configuration, this call returns an empty configuration. 
Modify this configuration as you see fit, and save it using saveToPreferencesWithCompletionHandler:.

Once you’ve set up a Personal VPN configuration, 
you can connect and disconnect the VPN using the NEVPNConnection class. 
Use the connection property of NEVPNManager to get the correct instance of that class.

Both iOS and macOS also support managed VPN, that is, VPN configurations installed via a configuration profile.
Managed VPN configurations take precedence over Personal VPN configurations. 
If both a managed VPN configuration and Personal VPN configuration are connected simultaneously, 
and both VPN tunnels are configured to act as the default route, 
it’s the managed VPN tunnel that will be used as the default route.


NEVPNProtocolIKEv2:
Settings for an IKEv2 VPN configuration.
NEVPNProtocolIPSec:
Settings for an IPsec VPN configuration.
NEVPNProtocol:
Settings common to both IKEv2 and IPsec VPN configurations.


https://developer.apple.com/business/documentation/Configuration-Profile-Reference.pdf

