Category是装饰者模式的一种体现，主要用于在不改变原有类的前提下，动态的给这个类添加一些方法，同时可以将一个类的实现拆分成多个独立的源文件，方便管理

typedef struct category_t {
    const char *name; //类的名字
    struct class_t *cls; //指向的类
    struct method_list_t *instanceMethods; //category中所有给类添加的实例方法的列表
    struct method_list_t *classMethods; //category中所有添加的类方法的列表
    struct protocol_list_t *protocols; //category实现的所有协议的列表
    struct property_list_t *instanceProperties; //category中添加的所有属性
} category_t;

编译一下上面的Category，clang -rewrite-objc AClass.m，我们可以得到AClass.cpp


Category和Class中同名方法的执行顺序的问题：
1.Category的方法没有“完全替换掉”原来类已经有的方法，也就是说如果Category和原来类都有methodA，那么Category附加完成之后，类的方法列表里会有两个methodA。
2.Category的方法被放到了新方法列表的前面，而原来类的方法被放到了新方法列表的后面，这也就是我们平常所说的Category的方法会“覆盖”掉原来类的同名方法，这是因为runtime时在查找方法的时候是顺着方法列表的顺序查找的，它只要一找到对应名字的方法就会停止。

由于属性在Category中不能自动生成get和set方法