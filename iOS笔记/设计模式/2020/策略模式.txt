找出程序中可能变化的地方，并且把它们独立出来，不要和不变的代码混在一起
针对接口编程，而不是针对实现编程
多用组合，少用继承

//飞的行为协议
protocol Flyable {
    func fly()
}
//使用翅膀飞的类
class FlyWithWings:Flyable{
    func fly() {
        print("我是会飞的鸭子，我用翅膀飞呀飞")
    }
}
//什么都不会飞
class FlyNoWay:Flyable{
    func fly() {
        print("我是不会飞的鸭子")
    }
}


class Duck{
    //添加行为委托代理者
    var flyBehavior : Flyable! = nil
    
    func setFlyBehavior(_ flyBehavior : Flyable){
        self.flyBehavior = flyBehavior
    }
    func swim(){
        print("鸭子游泳喽～")
    }
    
    func quack(){
        print("鸭子呱呱叫")
    }
    
    func display(){
    }
    
    //执行飞的行为
    func performFly(){
        guard self.flyBehavior != nil else {
            return
        }
        self.flyBehavior.fly()
    }
}

//用绿头鸭实现会飞的功能
class MallarDuck : Duck{
    override init() {
        super.init()
        self.setFlyBehavior(FlyWithWings())
    }
    override func display() {
        print("我是绿头鸭子")
    }
}
class RedHeadDuck:Duck{
    override init() {
        super.init()
        self.setFlyBehavior(FlyWithWings())
    }
    override func display() {
        print("我是红头鸭子")
    }
}
class RubberDuck:Duck{
    override init() {
        super.init()
        self.setFlyBehavior(FlyNoWay())
    }
    override func display() {
        print("橡皮鸭")
    }
}

给模型鸭子装发动机，支持他飞
class FlyAutomaticPower : Flyable{
    func fly() {
        print("我是用发动机飞的鸭子")
    }
}


print("鸭子：使用接口")
var duck : Duck = MallarDuck()
duck.performFly()
duck.setFlyBehavior(FlyNoWay())
duck.performFly()
print("-----创建一个模型鸭子，且会飞")
duck = ModelDuck()
duck.performFly()
print("-----给模型鸭子装发动机，支持飞")
duck.setFlyBehavior(FlyAutomaticPower())
duck.performFly()
print("\n")
