简单工厂模式:
简单工厂模式是由一个工厂对象决定创建出哪一种产品类的实例

抽象工厂模式:
抽象工厂模式可以向客户端提供一个接口，使客户端在不必指定产品的具体的情况下，创建多个产品族中的产品对象。
根据里氏替换原则，任何接受父类型的地方，都应当能够接受子类型
比如iOS中的NSNumber对象就是抽象对象，不能被实例化

- (void)viewDidLoad {
    [super viewDidLoad];
    NSNumber *num = [[NSNumber alloc] init];

    NSNumber *intNum = [NSNumber numberWithInt:97];
    NSNumber *floatNum = [NSNumber numberWithFloat:1.0f];
    NSNumber *boolNum = [NSNumber numberWithBool:YES];
    
    NSLog(@"num = %@",[[num class] description]);

    NSLog(@"intNum = %@",[[intNum class] description]);
    NSLog(@"floatNum = %@",[[floatNum class] description]);
    NSLog(@"boolNum = %@",[[boolNum class] description]);
    
    NSLog(@"转化 = %c",[intNum charValue]);
}
2018-06-23 12:39:54.268165+0800 测试NSNumber抽象类[41376:2245510] num = (null)
2018-06-23 12:39:54.268313+0800 测试NSNumber抽象类[41376:2245510] intNum = __NSCFNumber
2018-06-23 12:39:54.268419+0800 测试NSNumber抽象类[41376:2245510] floatNum = __NSCFNumber
2018-06-23 12:39:54.268521+0800 测试NSNumber抽象类[41376:2245510] boolNum = __NSCFBoolean
2018-06-23 12:39:54.268658+0800 测试NSNumber抽象类[41376:2245510] 转化 = a


#import <Foundation/Foundation.h>
#import <UIKit/UIKit.h>
@interface ColorViewFactory : NSObject
+(UIView*)createView;
+(UIButton*)createButton;
@end


#import "ColorViewFactory.h"

@implementation ColorViewFactory
- (instancetype)init
{
    if ([self isMemberOfClass:[ColorViewFactory class]]) {
        return nil;
    } else {
        self = [super init];
        if (self) {

        }
        return self;
    }
}
+(UIView*)createView {return nil;}
+(UIButton*)createButton {return nil;}
@end




#import <Foundation/Foundation.h>
#import "ColorViewFactory.h"
@interface RedCodeViewFactory : ColorViewFactory
@end


#import "RedCodeViewFactory.h"

@implementation RedCodeViewFactory
+(UIView*)createView{
    UIView* redView = [[UIView alloc] init];
    redView.backgroundColor = [UIColor redColor];
    redView.frame    = CGRectMake(0, 0, 100, 100);
    return redView;
}
+(UIButton*)createButton{
    UIButton* redBtn = [UIButton  buttonWithType:0];
       redBtn.frame    = CGRectMake(100, 100, 100, 100);
    return redBtn;
}
@end