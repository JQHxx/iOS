HTTPS 客户端与服务器交互过程：
1、客户端发送请求，服务器返回公钥给客户端；
2、客户端生成对称加密秘钥，用公钥对其进行加密后，返回给服务器；
3、服务器收到后，利用私钥解开得到对称加密秘钥，保存；
4、之后的交互都使用对称加密后的数据进行交互。

==========================================HTTPS
HTTP 有以下安全性问题：
使用明文(不加密)进行通信，内容可能会被窃听；
不验证通信方的身份，通信方的身份有可能遭遇伪装；
无法证明报文的完整性，报文有可能遭篡改

在传输层增加了一层 SSL（Secure Sockets Layer 安全套接层协议）/ TLS (Transport Layer Security 安全层传输协议) 来加密 HTTP 的通信内容

HTTPS (HTTP Secure) 并不是新协议，而是 HTTP 先和 SSL（Secure Sockets Layer 安全套接层）/ TLS (Transport Layer Security 安全层传输协议) 通信，再由 SSL/TLS 和 TCP 通信。也就是说 HTTPS 使用了隧道进行通信


由于不确认通信对方，就会导致一些问题:
服务器无法验证请求来自谁，是否是合法的客户端。
客户端收到响应，也无法验证是否是来自合法的服务器。
无法阻止海量请求下的 Dos 拒绝攻击（Denial of Service，拒绝服务攻击）


通过使用 SSL，HTTPS 不仅能保证密文传输，重要的是还可以做到验证通信方的身份，保证报文的完整性

HTTPS 采用混合的加密机制，使用公开密钥加密用于传输对称密钥，之后使用对称密钥加密进行通信

-------------------------------------认证:
HTTPS 通过使用 证书 来对通信方进行认证

数字证书认证机构（CA，Certificate Authority）是客户端与服务器双方都可信赖的第三方机构

服务器的运营人员向CA提出公开密钥的申请，CA在判明提出申请者的身份之后，会对已申请的公开密钥做数字签名，然后分配这个已签名的公开密钥，并将该公开密钥放入公开密钥证书后绑定在一起

进行 HTTPS 通信时，服务器会把证书发送给客户端，客户端取得其中的公开密钥之后，先进行验证，如果验证通过，就可以开始通信

使用 OpenSSL 这套开源程序，每个人都可以构建一套属于自己的认证机构，从而自己给自己颁发服务器证书。浏览器在访问该服务器时，会显示“无法确认连接安全性”或“该网站的安全证书存在问题”等警告消息

keystore就是用来保存密钥对的,比如公钥和私钥