压缩一定在加密之前。
因为加密以后，比特序列的冗余性消失，基本上无法再压缩了。在加密前进行压缩的做法不仅仅限于混合密码系统，而是对所有密码都适用

============================对称加密
对称密码 (symmetric cryptography)是指在加密和解密时使用同一密钥的方式。对应的加密方式是对称加密。目前广泛使用 AES

对称密码有多种别名，公共密钥密码(common-key cryptography)，传统密码(conventional cryptography)，私钥密码(secret-key cryptography)，共享密钥密码(shared-key cryptography)

对称密码需要解决将解密密钥配送给接收者的密钥配送问题

============================非对称加密
公钥密码 (public-key cryptography)则是指在加密和解密时使用不同密钥的方式。对应的加密方式是非对称加密。目前广泛使用 RSA

公钥密码解决了密钥配送的问题，但是存在通过中间人攻击被伪装的风险，因此需要对带有数字签名的公钥进行认证

============================单向散列函数
散列值是用单向散列函数(one-way hash function)计算出来的数值。
目前广泛使用 SHA-2(SHA-224、SHA-356、SHA-384、SHA-512) 和 具有全新结构的 SHA-3(Keccak 算法)

散列值 hash，又被称为哈希值，密码校验和(cryptographic checksum)，指纹(fingerprint)，消息摘要(message digest)

单向散列函数并不是为了保证消息的机密性，而是完整性(integrity)
完整性指的是，数据是正确的，而不是伪造的。单向散列函数是保证信息的完整性的密码技术，它会检测数据是否被篡改

============================消息认证码
为了确认消息是否来自期望的通信对象，可以通过使用消息认证码(message authentication code)。消息认证码主要是提供了认证(authentication)机制，与此同时它也能保证消息的完整性

消息认证码中最常用的单向散列函数是 HMAC。HMAC 的构成不依赖于某一种具体的单向散列函数算法

============================数字签名
防抵赖的技术 —— 数字签名

公钥基础设施中使用的证书，就是对公钥加上认证机构的数字签名所构成的

============================伪随机数生成器
伪随机数生成器(Pseudo Random Number Generator，PRNG是一种能够模拟产生随机数列的算法。
伪随机数负责承担密钥生成的职责。它由密码和单向散列函数等技术构成，主要用于生成密钥

============================
对称加密和公钥密码是机密性的压缩
单向散列函数是完整性的压缩
消息认证码和数字签名是认证的压缩
伪随机数生成器是不可预测性的压缩

在消息认证码中，MAC 值就是认证符号，在数字签名中，签名就是认证符号。
两者都是通过较短的认证符号来对较长的消息进行认证

	   		压缩前				压缩后	
对称密码		明文	--->			密钥		机密性的压缩
公钥密码		明文	--->			密钥		机密性的压缩
单向单列函数	消息	--->			散列值	完整性的压缩
消息认证码	消息	--->			认证符号(MAC 值)		认证的压缩
数字签名		消息	--->			认证符号(签名)		认证的压缩
伪随机数生成器	伪随机数列	--->	种子		不可预测性的压缩

============================
{
	------------------------加密:
	生成和加密会话密钥
	1.用伪随机数生成器生成会话密钥。
	2.用公钥密码加密会话密钥，这里使用的的密钥是接收者的公钥。
	压缩和加密消息
	3.压缩消息
	4.用对称密码对压缩消息进行加密，这里的密钥使用的是步骤 1 中的会话密钥
	5.将第 2 步的加密的会话密钥和第 4 步的加密消息拼在一起
	6.将第 5 步的结果转换为文本数据，转换后的结果就是报文数据

	###用公钥密码加密会话密钥，用对称密码加密消息

	------------------------解密:
	解密私钥
	1.接收者输入解密口令，解除口令密码(PBE)
	2.求出口令的散列值，生成用于解密私钥的密钥
	3.将钥匙串经过加密的私钥进行解密
	解密会话密钥
	4.将报文数据(文本数据)转换成二进制数据
	5.将二进制数据分解成两部分：加密的会话密钥、经过压缩和加密的消息
	6.用公钥密码解密会话密钥，这里是用步骤 3 中生成的接收者的私钥
	解压和解压缩消息
	7.对步骤 5 中得到经过压缩和加密的消息用对称密码进行解密。使用步骤 6 中生成的会话密钥
	8.对步骤 7 中得到的经过压缩的消息进行解压缩
	9.得到最原始的消息
}

{
	------------------------生成数字签名
	解密私钥
	1.发送者输入签名用的口令(PBE)
	2.求出口令的散列值，生成用于解密私钥的密钥
	3.将钥匙串经过加密的私钥进行解密
	生成数字签名
	4.用单向散列函数计算消息的散列值
	5.对步骤 4 中得到的散列值进行签名，这一步相当于对步骤 3 中得到的私钥进行加密。
	6.将步骤 5 中生成的数字签名和消息进行拼合
	7.将步骤 6 中的结果进行压缩
	8.将步骤 7 的结果转换为文本数据
	9.步骤 8 的结果就是报文数据
	------------------------验证数字签名
	恢复发送者发送的散列值
	1.将报文数据(文本数据)转换为二进制数据
	2.对经过压缩的数据进行解压缩
	3.将解压缩以后的数据分解成经过签名的散列值和消息两部分
	4.将经过签名的散列值(经过加密的散列值)用发送者的公钥进行解密，恢复出发送者发送的散列值
	对比散列值
	5.将步骤 3 中分解出的消息输入单向散列函数进行计算散列值
	6.将步骤 4 中得到的散列值与步骤 5 中得到的散列值进行对比
	7.如果步骤 6 中结果相等则数字签名验证成功，不相等则验证失败。
	8.步骤 3 中分解出的消息就是发送者发送的消息
}