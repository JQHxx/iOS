在一个进程调用exit了之后，该进程 并非马上就消失掉，而是留下一个称为僵尸进程（Zombie）的数据结构

在Linux进程的5种状态中，僵尸进程是非常特殊的一种，它已经放弃了几乎所有内存空间，没有任何可执行代码，也不能被调度，仅仅在进程列表中保留一个位置，记载该进程的退出状态等信息供其他进程收集，除此之外，僵尸进程不再占有 任何内存空间

僵尸进程中保存着很多对程序员和系统管理员非常重要的信息
首先，这个进程是怎么死亡的？是正常退出呢，还是出现了错误，还是被其它进程强迫退出的？也就是说，这个程序的退出码是什么？
其次，这个进程占用的总系统CPU时间和总用户CPU时间分别是多少？发生页错误的数目和收到信号的数目
这些信息都被存储在僵尸进程中，试想如果没有僵尸进程，进程执行多长我们并不知道，一旦其退出，所有与之相关的信息都立刻都从系统中清除

进程退出后，系统会把该进程的状态变成Zombie，然后给上一定的时间等着父进程来收集其退出信息，因为可能父进程正忙于别的事情来不及收集，所以，使用Zombie状态表示进程退出了，正在等待父进程收集信息中

Zombie进程不可以用kill命令清除，因为进程已退出，如果需要清除这样的进程，那么需要清除其父进程，或是等很长的时间后被内核清除。
因为 Zombie的进程还占着个进程ID号，这样的进程如果很多的话，不利于系统的进程调度

其中的”Z”就是僵尸进程的标志
收集Zombie进程的信息，并终结这些僵尸进程，需要我们在父进程中使用waitpid调用和wait调用。
这两者的作用都是收集僵尸进程留下的信息，同时使这个进程彻底消失

========================孤儿进程orphan
一个进程结束了，但是他的父进程没有等待(调用wait / waitpid)他， 那么他将变成一个僵尸进程
但是如果该进程的父进程已经先结束了，那么该进程就不会变成僵尸进程， 因为每个进程结束的时候，系统都会扫描当前系统中所运行的所有进程， 看有没有哪个进程是刚刚结束的这个进程的子进程，如果是的话，就由Init 来接管他，成为他的父进程, 这样的进程就是下面的孤儿进程

孤儿进程 
如果一个父进程退出，而它的一个或多个子进程还在运行，那么那些子进程将成为孤儿进程。
孤儿进程将被init进程(进程号为1或者0)所收养，并由init进程对它们完成状态收集工作。

僵尸进程将会导致资源浪费，而孤儿进程不会

子进程是通过父进程创建的，子进程再创建新的进程。
子进程的结束和父进程的运行是一个异步过程,即父进程永远无法预测子进程 到底什么时候结束。 当一个 进程完成它的工作终止之后，它的父进程需要调用wait()或者waitpid()系统调用取得子进程的终止状态

孤儿进程：一个父进程退出，而它的一个或多个子进程还在运行，那么那些子进程将成为孤儿进程。孤儿进程将被init进程(进程号为1)所收养，并由init进程对它们完成状态收集工作。

僵尸进程：一个进程使用fork创建子进程，如果子进程退出，而父进程并没有调用wait或waitpid获取子进程的状态信息，那么子进程的进程描述符仍然保存在系统中。这种进程称之为僵死进程


###
这种机制就是： 在每个进程退出的时候，内核释放该进程所有的资源，包括打开的文件，占用的内存等。
但是仍然为其保留一定的信息（包括进程号the process ID，退出状态the termination status of the process，运行时间the amount of CPU time taken by the process等）。
直到父进程通过wait / waitpid时才释放
###

由于父子进程运行的顺序是不定的,那么结束的时候也不能确定.因此会出现如下两种情况:
　　①父进程先结束,那么子进程由init进程接管,负责子进程的善后工作,子进程成功孤儿进程. 
　　②子进程先结束,而父进程并没有调用wait或waitpid获取子进程的状态信息，那么子进程的进程描述符仍然保存在系统中,但是成为”黑户”,并不被init所知,更不能被接管,成为僵死进程。 
　　可见如果父进程进程不调用wait / waitpid的话，那么保留的子进程那段信息就不会释放，其进程号就会一直被占用，但是系统所能使用的进程号是有限的，如果大量的产生僵死进程，将因为没有可用的进程号而导致系统不能产生新的进程. 此即为僵尸进程的危害，应当避免


每当出现一个孤儿进程的时候，内核就把孤儿进程的父进程设置为init，而init进程会循环地wait()它的已经退出的子进程


任何一个子进程(init除外)在exit()之后，并非马上就消失掉，而是留下一个称为僵尸进程(Zombie)的数据结构，等待父进程处理。这是每个子进程在结束时都要经过的阶段。如果子进程在exit()之后，父进程没有来得及处理，这时用ps命令就能看到子进程的状态是“Z”。如果父进程能及时处理，可能用ps命令就来不及看到子进程的僵尸状态，但这并不等于子进程不经过僵尸状态。 如果父进程在子进程结束之前退出，则子进程将由init接管。init将会以父进程的身份对僵尸状态的子进程进行处理


当我们寻求如何消灭系统中大量的僵死进程时，答案就是把产生大量僵死进程的那个元凶枪毙掉（也就是通过kill发送SIGTERM或者SIGKILL信号)

孤儿进程:
#include <stdio.h>
#include <stdlib.h>
#include <errno.h>
#include <unistd.h>
#include <string.h>

#include <sys/types.h>


/**
 *   在这个程序中
 *   我们先在程序FROK一个子进程
 *   然后父进程等待1S,
 *   等待子进程打印出自己的PID, 和父进程的PID
 *   随后父进程立马退出
 *
 *   然后子进程在打印出自己和父进程的PID后
 *   睡眠5S, 以保证父进程先退出
 *   此时子进程成为孤儿进程, 由init接管
 *   然后在自己苏醒之后, 再打印出自己的PID和父进程的PID
 *
**/

int main()
{
    pid_t pid;

    //创建一个进程
    pid = fork();

    if(pid < 0)   //  FROK创建进程失败时返回-1
    {
        printf("fork error errno = %d:%s", errno , strerror(errno));
        exit(1);
    }
    else if(pid == 0)      //  FROK在子进程中返回0
    {
        printf("child  %d : I am the child process...\n", getpid( ));

        //  输出子进程ID和父进程ID
        printf("child  %d : pid =  %d, ppid = %d\n", getpid(), getpid(), getppid());


        //  睡眠5s，保证父进程先退出
        printf("child  %d : I will sleep five seconds.\n", getpid());
        sleep(5);

        printf("pid =  %d, ppid = %d\n", getpid(), getppid());
        //输出进程信息
        system("ps -o pid,ppid,state,tty,command");
        printf("child process is exited.\n");
        //exit(0);
    }
    else                //  FROK在父进程中返回子进程的pid
    {

        printf("parent %d : I am the parent process...\n", getpid());
        printf("parent %d : pid =  %d, ppid = %d\n", getpid(), getpid(), getppid());

        //  父进程睡眠1s，保证子进程输出进程id
        sleep(1);
        printf("father process is  exited.\n");

    }
    return 0;
}

// 终端命令
ps -o pid,ppid,state,tty,command

是在终端中运行,因此我们的init进程并不是主的init进程,而是user的init进程. 
我们的程序并不是运行在系统的shell中,而是运行在bash中



僵尸进程:
#include <stdio.h>
#include <stdlib.h>
#include <errno.h>
#include <unistd.h>
#include <string.h>

#include <sys/types.h>

int main()
{
    pid_t pid;

    //创建一个进程
    pid = fork();

    if(pid < 0)   //  FROK创建进程失败时返回-1
    {
        printf("fork error errno = %d:%s", errno , strerror(errno));
        exit(1);
    }
    else if(pid == 0)      //  FROK在子进程中返回0
    {
        printf("child  %d : I am the child process...\n", getpid( ));

        //  输出子进程ID和父进程ID
        printf("child  %d : pid =  %d, ppid = %d\n", getpid(), getpid(), getppid());

        printf("child process is exited [zombie]....\n");
        //exit(0);
    }
    else                //  FROK在父进程中返回子进程的pid
    {

        printf("parent %d : I am the parent process...\n", getpid());
        printf("parent %d : pid =  %d, ppid = %d\n", getpid(), getpid(), getppid());

        //  父进程睡眠5s，保证子进程退出
        printf("parent %d : I will sleep 5 seconds...\n", getpid());
        sleep(5);
        system("ps -o pid,ppid,state,tty,command");
        //printf("father process is  exited.\n");

    }
    return 0;
}


解决僵尸进程:
#include <stdio.h>
#include <stdlib.h>
#include <errno.h>
#include <unistd.h>
#include <string.h>
#include <signal.h>

#include <sys/wait.h>
#include <sys/types.h>




void signal_child(int signo)
{
     pid_t          pid;
     int            state;

     //处理僵尸进程
     while((pid = waitpid(-1, &state, WNOHANG)) > 0)
     {
         printf("\n==child %d terminated.==\n\n", pid);
     }
     return ;
}

/**
 *   在这个程序中
 *   父进程产生一个僵尸进程
 *   在子进程退出后, 将信号SIGCHLD
 *   而父进程中注册了信号SIGCHLD的信号处理函数
 *   在信号处理函数中, 将使用waitpid子进程
**/
int main()
{
    pid_t pid;

    //  注册信号SIGCHLD的处理函数
    //  当子进程退出时, 此信号将被触发
    signal(SIGCHLD, signal_child);
    //创建一个进程
    pid = fork();

    if(pid < 0)   //  FROK创建进程失败时返回-1
    {
        printf("fork error errno = %d:%s", errno , strerror(errno));
        exit(1);
    }
    else if(pid == 0)      //  FROK在子进程中返回0
    {
        printf("child  %d : I am the child process...\n", getpid( ));

        //  输出子进程ID和父进程ID
        printf("child  %d : pid =  %d, ppid = %d\n", getpid(), getpid(), getppid());

        printf("child  %d :process is exited [not zombie]....\n\n", getpid());

        //  注意子进程需要退出exit
        exit(0);
    }
    else                //  FROK在父进程中返回子进程的pid
    {

        printf("parent %d : I am the parent process...\n", getpid());
        printf("parent %d : pid =  %d, ppid = %d\n", getpid(), getpid(), getppid());

        //  父进程睡眠5s，保证子进程退出
        printf("parent %d : I will sleep 5 seconds...\n\n", getpid());
        sleep(5);

        system("ps -o pid,ppid,state,tty,command");
    }

    return 0;
}